
Projecttt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000341a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00800060  0000341a  000034ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001f0  008001f0  0000363e  2**0
                  ALLOC
  3 .stab         00003018  00000000  00000000  00003640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001146  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000779e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000793e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c498  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 08 	call	0x1000	; 0x1000 <main>
      8a:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 ee       	ldi	r22, 0xE7	; 231
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 51       	subi	r30, 0x11	; 17
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint16 g_adcResult = 0;

ISR (ADC_vect){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62

	g_adcResult=ADC; //ADC value
     e48:	e4 e2       	ldi	r30, 0x24	; 36
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	90 93 f1 01 	sts	0x01F1, r25
     e54:	80 93 f0 01 	sts	0x01F0, r24
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <ADC_init>:

void ADC_init(const ADC_ConfigType * Config_Ptr){
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	00 d0       	rcall	.+0      	; 0xe74 <ADC_init+0x6>
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(SREG,7); // IBit
     e7c:	af e5       	ldi	r26, 0x5F	; 95
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ef e5       	ldi	r30, 0x5F	; 95
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
	ADMUX&=0XE0; //To reset Channels
     e8a:	a7 e2       	ldi	r26, 0x27	; 39
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e2       	ldi	r30, 0x27	; 39
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 7e       	andi	r24, 0xE0	; 224
     e96:	8c 93       	st	X, r24
	ADMUX = (ADMUX & 0x3F) | (Config_Ptr->ref_volt); /*dynamic config for REFERENCE*/
     e98:	a7 e2       	ldi	r26, 0x27	; 39
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e2       	ldi	r30, 0x27	; 39
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	98 2f       	mov	r25, r24
     ea4:	9f 73       	andi	r25, 0x3F	; 63
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	80 81       	ld	r24, Z
     eac:	89 2b       	or	r24, r25
     eae:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN); //ADC ENABLE
     eb0:	a6 e2       	ldi	r26, 0x26	; 38
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e6 e2       	ldi	r30, 0x26	; 38
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	80 68       	ori	r24, 0x80	; 128
     ebc:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0xF8) | (Config_Ptr->prescaler); /*dynamic config for divison factor*/
     ebe:	a6 e2       	ldi	r26, 0x26	; 38
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	98 2f       	mov	r25, r24
     eca:	98 7f       	andi	r25, 0xF8	; 248
     ecc:	e9 81       	ldd	r30, Y+1	; 0x01
     ece:	fa 81       	ldd	r31, Y+2	; 0x02
     ed0:	81 81       	ldd	r24, Z+1	; 0x01
     ed2:	89 2b       	or	r24, r25
     ed4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIE); //INT ENABLE
     ed6:	a6 e2       	ldi	r26, 0x26	; 38
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e6 e2       	ldi	r30, 0x26	; 38
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 60       	ori	r24, 0x08	; 8
     ee2:	8c 93       	st	X, r24
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <ADC_readChannel>:

void ADC_readChannel(uint8 channel_number){
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01

	channel_number &= 0x07; //for safety en channel num mn 0 l 7
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	87 70       	andi	r24, 0x07	; 7
     efe:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0XE0; //clearr
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 7e       	andi	r24, 0xE0	; 224
     f0c:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_number; //insert
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	90 81       	ld	r25, Z
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	89 2b       	or	r24, r25
     f1c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); //START CONV
     f1e:	a6 e2       	ldi	r26, 0x26	; 38
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e6 e2       	ldi	r30, 0x26	; 38
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8c 93       	st	X, r24

}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <DcMotor_Init>:
#include 	"gpio.h"
#include 	"common_macros.h"
#include 	"dc.h"
#include 	"pwm.h"

void DcMotor_Init(void){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62

	/* direction of IN1/IN2 of motor as OP/s*/

	GPIO_setupPinDirection(PORTA_ID,PIN1_ID,PIN_OUTPUT);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	41 e0       	ldi	r20, 0x01	; 1
     f42:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID,PIN2_ID,PIN_OUTPUT);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	62 e0       	ldi	r22, 0x02	; 2
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>

	/* turn off dc motor at beginning */
	GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
	GPIO_writePin(PORTA_ID,PIN2_ID,LOGIC_LOW);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <DcMotor_Rotate+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <DcMotor_Rotate+0x8>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	6a 83       	std	Y+2, r22	; 0x02


	switch(state){
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3c 83       	std	Y+4, r19	; 0x04
     f82:	2b 83       	std	Y+3, r18	; 0x03
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	b9 f0       	breq	.+46     	; 0xfbc <DcMotor_Rotate+0x52>
     f8e:	2b 81       	ldd	r18, Y+3	; 0x03
     f90:	3c 81       	ldd	r19, Y+4	; 0x04
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	01 f1       	breq	.+64     	; 0xfd8 <DcMotor_Rotate+0x6e>
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	49 f5       	brne	.+82     	; 0xff2 <DcMotor_Rotate+0x88>

	case Stop:
		PWM_Timer0_Start(speed);
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	0e 94 05 19 	call	0x320a	; 0x320a <PWM_Timer0_Start>
		GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN2_ID,LOGIC_LOW);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	62 e0       	ldi	r22, 0x02	; 2
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <DcMotor_Rotate+0x88>
		break;
	case CW:
		PWM_Timer0_Start(speed);
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	0e 94 05 19 	call	0x320a	; 0x320a <PWM_Timer0_Start>
		GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN2_ID,LOGIC_HIGH);
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	62 e0       	ldi	r22, 0x02	; 2
     fd0:	41 e0       	ldi	r20, 0x01	; 1
     fd2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
     fd6:	0d c0       	rjmp	.+26     	; 0xff2 <DcMotor_Rotate+0x88>
		break;
	case ACW:
		PWM_Timer0_Start(speed);
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	0e 94 05 19 	call	0x320a	; 0x320a <PWM_Timer0_Start>
		GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_HIGH);
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN2_ID,LOGIC_LOW);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	62 e0       	ldi	r22, 0x02	; 2
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
		break;
	}

}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <main>:
void Timer1_Fast_PWM_Init(unsigned short duty_cycle);
void Door_Servo(void);
void LED_Init(void);
void Users_Remove_Menu(void);

int main(void) {
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	65 97       	sbiw	r28, 0x15	; 21
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61

	uint8 trial = 0; //Password match
    1014:	1b 8a       	std	Y+19, r1	; 0x13
	uint16 enteredPassword;
	uint8 internal_usage_buttons; //during modes
	uint8 ext_usage_buttons; //during removing users

	PW_Init(); // PW Intialize
    1016:	0e 94 67 0a 	call	0x14ce	; 0x14ce <PW_Init>
	LCD_init(); //LCD Intialize
    101a:	0e 94 40 13 	call	0x2680	; 0x2680 <LCD_init>
	ADC_ConfigType adc_ConfigType = { AREF, DivisonFactor8 };
    101e:	1c 8a       	std	Y+20, r1	; 0x14
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	8d 8b       	std	Y+21, r24	; 0x15
	ADC_init(&adc_ConfigType);
    1024:	ce 01       	movw	r24, r28
    1026:	44 96       	adiw	r24, 0x14	; 20
    1028:	0e 94 37 07 	call	0xe6e	; 0xe6e <ADC_init>
	DcMotor_Init();
    102c:	0e 94 9a 07 	call	0xf34	; 0xf34 <DcMotor_Init>
	LED_Init();
    1030:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <LED_Init>

	do {
		trial++;
    1034:	8b 89       	ldd	r24, Y+19	; 0x13
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		enteredPassword = Enter_Pw();
    103a:	0e 94 03 0a 	call	0x1406	; 0x1406 <Enter_Pw>
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a8 ec       	ldi	r26, 0xC8	; 200
    1048:	b2 e4       	ldi	r27, 0x42	; 66
    104a:	8b 87       	std	Y+11, r24	; 0x0b
    104c:	9c 87       	std	Y+12, r25	; 0x0c
    104e:	ad 87       	std	Y+13, r26	; 0x0d
    1050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1052:	6b 85       	ldd	r22, Y+11	; 0x0b
    1054:	7c 85       	ldd	r23, Y+12	; 0x0c
    1056:	8d 85       	ldd	r24, Y+13	; 0x0d
    1058:	9e 85       	ldd	r25, Y+14	; 0x0e
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	4a ef       	ldi	r20, 0xFA	; 250
    1060:	54 e4       	ldi	r21, 0x44	; 68
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	8f 83       	std	Y+7, r24	; 0x07
    106c:	98 87       	std	Y+8, r25	; 0x08
    106e:	a9 87       	std	Y+9, r26	; 0x09
    1070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e8       	ldi	r20, 0x80	; 128
    1080:	5f e3       	ldi	r21, 0x3F	; 63
    1082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1086:	88 23       	and	r24, r24
    1088:	2c f4       	brge	.+10     	; 0x1094 <main+0x94>
		__ticks = 1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	3f c0       	rjmp	.+126    	; 0x1112 <main+0x112>
	else if (__tmp > 65535)
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	3f ef       	ldi	r19, 0xFF	; 255
    10a0:	4f e7       	ldi	r20, 0x7F	; 127
    10a2:	57 e4       	ldi	r21, 0x47	; 71
    10a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10a8:	18 16       	cp	r1, r24
    10aa:	4c f5       	brge	.+82     	; 0x10fe <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e2       	ldi	r20, 0x20	; 32
    10ba:	51 e4       	ldi	r21, 0x41	; 65
    10bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	0f c0       	rjmp	.+30     	; 0x10f4 <main+0xf4>
    10d6:	88 ec       	ldi	r24, 0xC8	; 200
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 83       	std	Y+4, r25	; 0x04
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <main+0xe2>
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	69 f7       	brne	.-38     	; 0x10d6 <main+0xd6>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1100:	78 85       	ldd	r23, Y+8	; 0x08
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <main+0x11e>
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

		if (enteredPassword == Admin_PW) {
    1126:	80 91 f3 01 	lds	r24, 0x01F3
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	89 89       	ldd	r24, Y+17	; 0x11
    1130:	9a 89       	ldd	r25, Y+18	; 0x12
    1132:	28 17       	cp	r18, r24
    1134:	39 07       	cpc	r19, r25
    1136:	21 f4       	brne	.+8      	; 0x1140 <main+0x140>
			key = 4;
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	80 93 f2 01 	sts	0x01F2, r24
    113e:	26 c0       	rjmp	.+76     	; 0x118c <main+0x18c>
		} else if (enteredPassword == User_One_PW) {
    1140:	80 91 f8 01 	lds	r24, 0x01F8
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	89 89       	ldd	r24, Y+17	; 0x11
    114a:	9a 89       	ldd	r25, Y+18	; 0x12
    114c:	28 17       	cp	r18, r24
    114e:	39 07       	cpc	r19, r25
    1150:	21 f4       	brne	.+8      	; 0x115a <main+0x15a>
			key = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 f2 01 	sts	0x01F2, r24
    1158:	19 c0       	rjmp	.+50     	; 0x118c <main+0x18c>
		} else if (enteredPassword == User_Two_PW) {
    115a:	80 91 f7 01 	lds	r24, 0x01F7
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	89 89       	ldd	r24, Y+17	; 0x11
    1164:	9a 89       	ldd	r25, Y+18	; 0x12
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	21 f4       	brne	.+8      	; 0x1174 <main+0x174>
			key = 2;
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	80 93 f2 01 	sts	0x01F2, r24
    1172:	0c c0       	rjmp	.+24     	; 0x118c <main+0x18c>
		} else if (enteredPassword == User_Three_PW) {
    1174:	80 91 f4 01 	lds	r24, 0x01F4
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	89 89       	ldd	r24, Y+17	; 0x11
    117e:	9a 89       	ldd	r25, Y+18	; 0x12
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	19 f4       	brne	.+6      	; 0x118c <main+0x18c>
			key = 3;
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	80 93 f2 01 	sts	0x01F2, r24
		}
		if (trial == Max_Entry) {
    118c:	8b 89       	ldd	r24, Y+19	; 0x13
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	89 f4       	brne	.+34     	; 0x11b4 <main+0x1b4>
			LCD_clearScreen();
    1192:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
			LCD_displayString("System Locked");
    1196:	80 e6       	ldi	r24, 0x60	; 96
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
			return 0;
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
			}
		}

	} //end while1

} //end main
    11a2:	65 96       	adiw	r28, 0x15	; 21
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret
		if (trial == Max_Entry) {
			LCD_clearScreen();
			LCD_displayString("System Locked");
			return 0;
		}
	} while (key == 0);
    11b4:	80 91 f2 01 	lds	r24, 0x01F2
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <main+0x1be>
    11bc:	3b cf       	rjmp	.-394    	; 0x1034 <main+0x34>
    11be:	49 c0       	rjmp	.+146    	; 0x1252 <main+0x252>
	while (1) {

		while (key == 4) {

			/* Display the main menu */
			Main_Menu();
    11c0:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Main_Menu>
			AC();
    11c4:	0e 94 87 0c 	call	0x190e	; 0x190e <AC>

			internal_usage_buttons = get_Key();
    11c8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    11cc:	88 8b       	std	Y+16, r24	; 0x10

			if (internal_usage_buttons == '%') {
    11ce:	88 89       	ldd	r24, Y+16	; 0x10
    11d0:	85 32       	cpi	r24, 0x25	; 37
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <main+0x1d8>
				Door_Servo();
    11d4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Door_Servo>
			}

			if (internal_usage_buttons == '*') {
    11d8:	88 89       	ldd	r24, Y+16	; 0x10
    11da:	8a 32       	cpi	r24, 0x2A	; 42
    11dc:	41 f4       	brne	.+16     	; 0x11ee <main+0x1ee>
				PORTB = PORTB ^ (1 << PC2); //TOGGLE
    11de:	a8 e3       	ldi	r26, 0x38	; 56
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e8 e3       	ldi	r30, 0x38	; 56
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	90 81       	ld	r25, Z
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	89 27       	eor	r24, r25
    11ec:	8c 93       	st	X, r24
			}
			if (internal_usage_buttons == '+') { // Remove User
    11ee:	88 89       	ldd	r24, Y+16	; 0x10
    11f0:	8b 32       	cpi	r24, 0x2B	; 43
    11f2:	79 f5       	brne	.+94     	; 0x1252 <main+0x252>
				/* Not Applicable as we are not using application */
				Users_Remove_Menu();
    11f4:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Users_Remove_Menu>

				ext_usage_buttons = get_Key();
    11f8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    11fc:	8f 87       	std	Y+15, r24	; 0x0f

				if (ext_usage_buttons == '+') {
    11fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1200:	8b 32       	cpi	r24, 0x2B	; 43
    1202:	59 f4       	brne	.+22     	; 0x121a <main+0x21a>
					eeprom_update_byte((uint8*) 61, 0); // Write 0 to USER 1
    1204:	8d e3       	ldi	r24, 0x3D	; 61
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
					LCD_clearScreen();
    120e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
					LCD_displayString("USER 1 removed");
    1212:	8e e6       	ldi	r24, 0x6E	; 110
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>

				}
				if (ext_usage_buttons == '-') {
    121a:	8f 85       	ldd	r24, Y+15	; 0x0f
    121c:	8d 32       	cpi	r24, 0x2D	; 45
    121e:	59 f4       	brne	.+22     	; 0x1236 <main+0x236>
					eeprom_update_byte((uint8*) 62, 0); // Write 0 to USER 2
    1220:	8e e3       	ldi	r24, 0x3E	; 62
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
					LCD_clearScreen();
    122a:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
					LCD_displayString("USER 2 removed");
    122e:	8d e7       	ldi	r24, 0x7D	; 125
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
				}
				if (ext_usage_buttons == '*') {
    1236:	8f 85       	ldd	r24, Y+15	; 0x0f
    1238:	8a 32       	cpi	r24, 0x2A	; 42
    123a:	59 f4       	brne	.+22     	; 0x1252 <main+0x252>
					eeprom_update_byte((uint8*) 63, 0); // Write 0 to USER 3
    123c:	8f e3       	ldi	r24, 0x3F	; 63
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
					LCD_clearScreen();
    1246:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
					LCD_displayString("USER 3 removed");
    124a:	8c e8       	ldi	r24, 0x8C	; 140
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
		}
	} while (key == 0);

	while (1) {

		while (key == 4) {
    1252:	80 91 f2 01 	lds	r24, 0x01F2
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	09 f4       	brne	.+2      	; 0x125c <main+0x25c>
    125a:	b2 cf       	rjmp	.-156    	; 0x11c0 <main+0x1c0>
    125c:	12 c0       	rjmp	.+36     	; 0x1282 <main+0x282>

		}

		while (key == 1) {

			Main_Menu();
    125e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Main_Menu>
			AC();
    1262:	0e 94 87 0c 	call	0x190e	; 0x190e <AC>

			internal_usage_buttons = get_Key();
    1266:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    126a:	88 8b       	std	Y+16, r24	; 0x10

			if (internal_usage_buttons == '*') {
    126c:	88 89       	ldd	r24, Y+16	; 0x10
    126e:	8a 32       	cpi	r24, 0x2A	; 42
    1270:	41 f4       	brne	.+16     	; 0x1282 <main+0x282>
				PORTB = PORTB ^ (1 << PC2); //TOGGLE
    1272:	a8 e3       	ldi	r26, 0x38	; 56
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e8 e3       	ldi	r30, 0x38	; 56
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	90 81       	ld	r25, Z
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	89 27       	eor	r24, r25
    1280:	8c 93       	st	X, r24
				}
			}

		}

		while (key == 1) {
    1282:	80 91 f2 01 	lds	r24, 0x01F2
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	51 f3       	breq	.-44     	; 0x125e <main+0x25e>
    128a:	12 c0       	rjmp	.+36     	; 0x12b0 <main+0x2b0>

		}

		while (key == 2) {

			Main_Menu();
    128c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Main_Menu>
			AC();
    1290:	0e 94 87 0c 	call	0x190e	; 0x190e <AC>

			internal_usage_buttons = get_Key();
    1294:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    1298:	88 8b       	std	Y+16, r24	; 0x10

			if (internal_usage_buttons == '*') {
    129a:	88 89       	ldd	r24, Y+16	; 0x10
    129c:	8a 32       	cpi	r24, 0x2A	; 42
    129e:	41 f4       	brne	.+16     	; 0x12b0 <main+0x2b0>
				PORTB = PORTB ^ (1 << PC2); //TOGGLE
    12a0:	a8 e3       	ldi	r26, 0x38	; 56
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e8 e3       	ldi	r30, 0x38	; 56
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	90 81       	ld	r25, Z
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	89 27       	eor	r24, r25
    12ae:	8c 93       	st	X, r24
				PORTB = PORTB ^ (1 << PC2); //TOGGLE
			}

		}

		while (key == 2) {
    12b0:	80 91 f2 01 	lds	r24, 0x01F2
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	51 f3       	breq	.-44     	; 0x128c <main+0x28c>
    12b8:	12 c0       	rjmp	.+36     	; 0x12de <main+0x2de>

		}

		while (key == 3) {

			Main_Menu();
    12ba:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Main_Menu>
			AC();
    12be:	0e 94 87 0c 	call	0x190e	; 0x190e <AC>

			internal_usage_buttons = get_Key();
    12c2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    12c6:	88 8b       	std	Y+16, r24	; 0x10

			if (internal_usage_buttons == '*') {
    12c8:	88 89       	ldd	r24, Y+16	; 0x10
    12ca:	8a 32       	cpi	r24, 0x2A	; 42
    12cc:	41 f4       	brne	.+16     	; 0x12de <main+0x2de>
				PORTB = PORTB ^ (1 << PC2); //TOGGLE
    12ce:	a8 e3       	ldi	r26, 0x38	; 56
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	90 81       	ld	r25, Z
    12d8:	84 e0       	ldi	r24, 0x04	; 4
    12da:	89 27       	eor	r24, r25
    12dc:	8c 93       	st	X, r24
				PORTB = PORTB ^ (1 << PC2); //TOGGLE
			}

		}

		while (key == 3) {
    12de:	80 91 f2 01 	lds	r24, 0x01F2
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	51 f3       	breq	.-44     	; 0x12ba <main+0x2ba>
    12e6:	b5 cf       	rjmp	.-150    	; 0x1252 <main+0x252>

000012e8 <get_Key>:

	} //end while1

} //end main

uint8 get_Key(void) {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	2f 97       	sbiw	r28, 0x0f	; 15
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61

	uint8 key;

	key = KEYPAD_getPressedKey();
    12fc:	0e 94 af 11 	call	0x235e	; 0x235e <KEYPAD_getPressedKey>
    1300:	8f 87       	std	Y+15, r24	; 0x0f

	if (key != 13) //Enter Button = ON
    1302:	8f 85       	ldd	r24, Y+15	; 0x0f
    1304:	8d 30       	cpi	r24, 0x0D	; 13
    1306:	19 f0       	breq	.+6      	; 0x130e <get_Key+0x26>
			{
		LCD_displayCharacter('*');
    1308:	8a e2       	ldi	r24, 0x2A	; 42
    130a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayCharacter>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	aa ef       	ldi	r26, 0xFA	; 250
    1314:	b3 e4       	ldi	r27, 0x43	; 67
    1316:	8b 87       	std	Y+11, r24	; 0x0b
    1318:	9c 87       	std	Y+12, r25	; 0x0c
    131a:	ad 87       	std	Y+13, r26	; 0x0d
    131c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1320:	7c 85       	ldd	r23, Y+12	; 0x0c
    1322:	8d 85       	ldd	r24, Y+13	; 0x0d
    1324:	9e 85       	ldd	r25, Y+14	; 0x0e
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a ef       	ldi	r20, 0xFA	; 250
    132c:	54 e4       	ldi	r21, 0x44	; 68
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	8f 83       	std	Y+7, r24	; 0x07
    1338:	98 87       	std	Y+8, r25	; 0x08
    133a:	a9 87       	std	Y+9, r26	; 0x09
    133c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1352:	88 23       	and	r24, r24
    1354:	2c f4       	brge	.+10     	; 0x1360 <get_Key+0x78>
		__ticks = 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
    135e:	3f c0       	rjmp	.+126    	; 0x13de <get_Key+0xf6>
	else if (__tmp > 65535)
    1360:	6f 81       	ldd	r22, Y+7	; 0x07
    1362:	78 85       	ldd	r23, Y+8	; 0x08
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	9a 85       	ldd	r25, Y+10	; 0x0a
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	3f ef       	ldi	r19, 0xFF	; 255
    136c:	4f e7       	ldi	r20, 0x7F	; 127
    136e:	57 e4       	ldi	r21, 0x47	; 71
    1370:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1374:	18 16       	cp	r1, r24
    1376:	4c f5       	brge	.+82     	; 0x13ca <get_Key+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6b 85       	ldd	r22, Y+11	; 0x0b
    137a:	7c 85       	ldd	r23, Y+12	; 0x0c
    137c:	8d 85       	ldd	r24, Y+13	; 0x0d
    137e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9e 83       	std	Y+6, r25	; 0x06
    139e:	8d 83       	std	Y+5, r24	; 0x05
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <get_Key+0xd8>
    13a2:	88 ec       	ldi	r24, 0xC8	; 200
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	8b 83       	std	Y+3, r24	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <get_Key+0xc6>
    13b2:	9c 83       	std	Y+4, r25	; 0x04
    13b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9e 83       	std	Y+6, r25	; 0x06
    13be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	8d 81       	ldd	r24, Y+5	; 0x05
    13c2:	9e 81       	ldd	r25, Y+6	; 0x06
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <get_Key+0xba>
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <get_Key+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <get_Key+0x102>
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(500);

	return key;
    13f2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    13f4:	2f 96       	adiw	r28, 0x0f	; 15
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <Enter_Pw>:

uint16 Enter_Pw(void) {
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	28 97       	sbiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
	uint8 res[Pw_Length]; // PW Stored in ARRAY
	uint8 enterbutton = 0; //Enter button
    141e:	1d 82       	std	Y+5, r1	; 0x05
	uint16 result = 0; //Result to store pw , uint16 because if number >>255 entered
    1420:	1c 82       	std	Y+4, r1	; 0x04
    1422:	1b 82       	std	Y+3, r1	; 0x03

	LCD_clearScreen();
    1424:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
    1428:	8b e9       	ldi	r24, 0x9B	; 155
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_moveCursor>

	/*PW Entry , Pw_Length Digits Entry*/

	for (int i = 0; i < Pw_Length; i++) {
    1438:	1a 82       	std	Y+2, r1	; 0x02
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	30 c0       	rjmp	.+96     	; 0x149e <Enter_Pw+0x98>
		res[i] = get_Key();
    143e:	09 81       	ldd	r16, Y+1	; 0x01
    1440:	1a 81       	ldd	r17, Y+2	; 0x02
    1442:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    1446:	28 2f       	mov	r18, r24
    1448:	ce 01       	movw	r24, r28
    144a:	06 96       	adiw	r24, 0x06	; 6
    144c:	fc 01       	movw	r30, r24
    144e:	e0 0f       	add	r30, r16
    1450:	f1 1f       	adc	r31, r17
    1452:	20 83       	st	Z, r18
		result = ((result) * 10) + ((res[i]) % 10);
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	9c 01       	movw	r18, r24
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	c9 01       	movw	r24, r18
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	a9 01       	movw	r20, r18
    146a:	48 0f       	add	r20, r24
    146c:	59 1f       	adc	r21, r25
    146e:	29 81       	ldd	r18, Y+1	; 0x01
    1470:	3a 81       	ldd	r19, Y+2	; 0x02
    1472:	ce 01       	movw	r24, r28
    1474:	06 96       	adiw	r24, 0x06	; 6
    1476:	fc 01       	movw	r30, r24
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	80 81       	ld	r24, Z
    147e:	9a e0       	ldi	r25, 0x0A	; 10
    1480:	69 2f       	mov	r22, r25
    1482:	0e 94 57 19 	call	0x32ae	; 0x32ae <__udivmodqi4>
    1486:	89 2f       	mov	r24, r25
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	84 0f       	add	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1, 0);

	/*PW Entry , Pw_Length Digits Entry*/

	for (int i = 0; i < Pw_Length; i++) {
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	5c f2       	brlt	.-106    	; 0x143e <Enter_Pw+0x38>
	}

	/* Waiting Enter button to be pressed , if any other button is pressed it will be ignored but DISPLAYED :(*/

	do {
		enterbutton = get_Key();
    14a8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <get_Key>
    14ac:	8d 83       	std	Y+5, r24	; 0x05
	} while (enterbutton != 13);
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	8d 30       	cpi	r24, 0x0D	; 13
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <Enter_Pw+0xa2>

	return result;
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    14b8:	28 96       	adiw	r28, 0x08	; 8
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	08 95       	ret

000014ce <PW_Init>:

void PW_Init(void) {
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	e8 97       	sbiw	r28, 0x38	; 56
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61

	/* Initalzing PWs in the internal EEPROM */

	eeprom_update_byte((uint8*) 60, 123); // Write 123 to EEPROM address 60
    14e2:	8c e3       	ldi	r24, 0x3C	; 60
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	6b e7       	ldi	r22, 0x7B	; 123
    14e8:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a0 e2       	ldi	r26, 0x20	; 32
    14f2:	b1 e4       	ldi	r27, 0x41	; 65
    14f4:	8d ab       	std	Y+53, r24	; 0x35
    14f6:	9e ab       	std	Y+54, r25	; 0x36
    14f8:	af ab       	std	Y+55, r26	; 0x37
    14fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fc:	6d a9       	ldd	r22, Y+53	; 0x35
    14fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1500:	8f a9       	ldd	r24, Y+55	; 0x37
    1502:	98 ad       	ldd	r25, Y+56	; 0x38
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	4a ef       	ldi	r20, 0xFA	; 250
    150a:	54 e4       	ldi	r21, 0x44	; 68
    150c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	89 ab       	std	Y+49, r24	; 0x31
    1516:	9a ab       	std	Y+50, r25	; 0x32
    1518:	ab ab       	std	Y+51, r26	; 0x33
    151a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    151c:	69 a9       	ldd	r22, Y+49	; 0x31
    151e:	7a a9       	ldd	r23, Y+50	; 0x32
    1520:	8b a9       	ldd	r24, Y+51	; 0x33
    1522:	9c a9       	ldd	r25, Y+52	; 0x34
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	5f e3       	ldi	r21, 0x3F	; 63
    152c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1530:	88 23       	and	r24, r24
    1532:	2c f4       	brge	.+10     	; 0x153e <PW_Init+0x70>
		__ticks = 1;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	98 ab       	std	Y+48, r25	; 0x30
    153a:	8f a7       	std	Y+47, r24	; 0x2f
    153c:	3f c0       	rjmp	.+126    	; 0x15bc <PW_Init+0xee>
	else if (__tmp > 65535)
    153e:	69 a9       	ldd	r22, Y+49	; 0x31
    1540:	7a a9       	ldd	r23, Y+50	; 0x32
    1542:	8b a9       	ldd	r24, Y+51	; 0x33
    1544:	9c a9       	ldd	r25, Y+52	; 0x34
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	3f ef       	ldi	r19, 0xFF	; 255
    154a:	4f e7       	ldi	r20, 0x7F	; 127
    154c:	57 e4       	ldi	r21, 0x47	; 71
    154e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1552:	18 16       	cp	r1, r24
    1554:	4c f5       	brge	.+82     	; 0x15a8 <PW_Init+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1556:	6d a9       	ldd	r22, Y+53	; 0x35
    1558:	7e a9       	ldd	r23, Y+54	; 0x36
    155a:	8f a9       	ldd	r24, Y+55	; 0x37
    155c:	98 ad       	ldd	r25, Y+56	; 0x38
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 e4       	ldi	r21, 0x41	; 65
    1566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	98 ab       	std	Y+48, r25	; 0x30
    157c:	8f a7       	std	Y+47, r24	; 0x2f
    157e:	0f c0       	rjmp	.+30     	; 0x159e <PW_Init+0xd0>
    1580:	88 ec       	ldi	r24, 0xC8	; 200
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9e a7       	std	Y+46, r25	; 0x2e
    1586:	8d a7       	std	Y+45, r24	; 0x2d
    1588:	8d a5       	ldd	r24, Y+45	; 0x2d
    158a:	9e a5       	ldd	r25, Y+46	; 0x2e
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <PW_Init+0xbe>
    1590:	9e a7       	std	Y+46, r25	; 0x2e
    1592:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1594:	8f a5       	ldd	r24, Y+47	; 0x2f
    1596:	98 a9       	ldd	r25, Y+48	; 0x30
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	98 ab       	std	Y+48, r25	; 0x30
    159c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a0:	98 a9       	ldd	r25, Y+48	; 0x30
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	69 f7       	brne	.-38     	; 0x1580 <PW_Init+0xb2>
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <PW_Init+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a8:	69 a9       	ldd	r22, Y+49	; 0x31
    15aa:	7a a9       	ldd	r23, Y+50	; 0x32
    15ac:	8b a9       	ldd	r24, Y+51	; 0x33
    15ae:	9c a9       	ldd	r25, Y+52	; 0x34
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	98 ab       	std	Y+48, r25	; 0x30
    15ba:	8f a7       	std	Y+47, r24	; 0x2f
    15bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15be:	98 a9       	ldd	r25, Y+48	; 0x30
    15c0:	9c a7       	std	Y+44, r25	; 0x2c
    15c2:	8b a7       	std	Y+43, r24	; 0x2b
    15c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <PW_Init+0xfa>
    15cc:	9c a7       	std	Y+44, r25	; 0x2c
    15ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10); // Wait for EEPROM write to complete
	Admin_PW = eeprom_read_byte((uint8*) 60);
    15d0:	8c e3       	ldi	r24, 0x3C	; 60
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__eerd_byte_m32>
    15d8:	80 93 f3 01 	sts	0x01F3, r24

	eeprom_update_byte((uint8*) 61, 245); // Write 245 to EEPROM address 61
    15dc:	8d e3       	ldi	r24, 0x3D	; 61
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	65 ef       	ldi	r22, 0xF5	; 245
    15e2:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	b1 e4       	ldi	r27, 0x41	; 65
    15ee:	8f a3       	std	Y+39, r24	; 0x27
    15f0:	98 a7       	std	Y+40, r25	; 0x28
    15f2:	a9 a7       	std	Y+41, r26	; 0x29
    15f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	6f a1       	ldd	r22, Y+39	; 0x27
    15f8:	78 a5       	ldd	r23, Y+40	; 0x28
    15fa:	89 a5       	ldd	r24, Y+41	; 0x29
    15fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a ef       	ldi	r20, 0xFA	; 250
    1604:	54 e4       	ldi	r21, 0x44	; 68
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8b a3       	std	Y+35, r24	; 0x23
    1610:	9c a3       	std	Y+36, r25	; 0x24
    1612:	ad a3       	std	Y+37, r26	; 0x25
    1614:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1616:	6b a1       	ldd	r22, Y+35	; 0x23
    1618:	7c a1       	ldd	r23, Y+36	; 0x24
    161a:	8d a1       	ldd	r24, Y+37	; 0x25
    161c:	9e a1       	ldd	r25, Y+38	; 0x26
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <PW_Init+0x16a>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9a a3       	std	Y+34, r25	; 0x22
    1634:	89 a3       	std	Y+33, r24	; 0x21
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <PW_Init+0x1e8>
	else if (__tmp > 65535)
    1638:	6b a1       	ldd	r22, Y+35	; 0x23
    163a:	7c a1       	ldd	r23, Y+36	; 0x24
    163c:	8d a1       	ldd	r24, Y+37	; 0x25
    163e:	9e a1       	ldd	r25, Y+38	; 0x26
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <PW_Init+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	6f a1       	ldd	r22, Y+39	; 0x27
    1652:	78 a5       	ldd	r23, Y+40	; 0x28
    1654:	89 a5       	ldd	r24, Y+41	; 0x29
    1656:	9a a5       	ldd	r25, Y+42	; 0x2a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9a a3       	std	Y+34, r25	; 0x22
    1676:	89 a3       	std	Y+33, r24	; 0x21
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <PW_Init+0x1ca>
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	98 a3       	std	Y+32, r25	; 0x20
    1680:	8f 8f       	std	Y+31, r24	; 0x1f
    1682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1684:	98 a1       	ldd	r25, Y+32	; 0x20
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <PW_Init+0x1b8>
    168a:	98 a3       	std	Y+32, r25	; 0x20
    168c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	89 a1       	ldd	r24, Y+33	; 0x21
    1690:	9a a1       	ldd	r25, Y+34	; 0x22
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	89 a1       	ldd	r24, Y+33	; 0x21
    169a:	9a a1       	ldd	r25, Y+34	; 0x22
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <PW_Init+0x1ac>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <PW_Init+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6b a1       	ldd	r22, Y+35	; 0x23
    16a4:	7c a1       	ldd	r23, Y+36	; 0x24
    16a6:	8d a1       	ldd	r24, Y+37	; 0x25
    16a8:	9e a1       	ldd	r25, Y+38	; 0x26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
    16b6:	89 a1       	ldd	r24, Y+33	; 0x21
    16b8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ba:	9e 8f       	std	Y+30, r25	; 0x1e
    16bc:	8d 8f       	std	Y+29, r24	; 0x1d
    16be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <PW_Init+0x1f4>
    16c6:	9e 8f       	std	Y+30, r25	; 0x1e
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	User_One_PW = eeprom_read_byte((uint8*) 61);
    16ca:	8d e3       	ldi	r24, 0x3D	; 61
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__eerd_byte_m32>
    16d2:	80 93 f8 01 	sts	0x01F8, r24

	eeprom_update_byte((uint8*) 62, 216); // Write 216 to EEPROM address 62
    16d6:	8e e3       	ldi	r24, 0x3E	; 62
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	68 ed       	ldi	r22, 0xD8	; 216
    16dc:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e2       	ldi	r26, 0x20	; 32
    16e6:	b1 e4       	ldi	r27, 0x41	; 65
    16e8:	89 8f       	std	Y+25, r24	; 0x19
    16ea:	9a 8f       	std	Y+26, r25	; 0x1a
    16ec:	ab 8f       	std	Y+27, r26	; 0x1b
    16ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	69 8d       	ldd	r22, Y+25	; 0x19
    16f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a ef       	ldi	r20, 0xFA	; 250
    16fe:	54 e4       	ldi	r21, 0x44	; 68
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	8d 8b       	std	Y+21, r24	; 0x15
    170a:	9e 8b       	std	Y+22, r25	; 0x16
    170c:	af 8b       	std	Y+23, r26	; 0x17
    170e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1710:	6d 89       	ldd	r22, Y+21	; 0x15
    1712:	7e 89       	ldd	r23, Y+22	; 0x16
    1714:	8f 89       	ldd	r24, Y+23	; 0x17
    1716:	98 8d       	ldd	r25, Y+24	; 0x18
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <PW_Init+0x264>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 8b       	std	Y+20, r25	; 0x14
    172e:	8b 8b       	std	Y+19, r24	; 0x13
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <PW_Init+0x2e2>
	else if (__tmp > 65535)
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	4c f5       	brge	.+82     	; 0x179c <PW_Init+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174a:	69 8d       	ldd	r22, Y+25	; 0x19
    174c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    174e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1750:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9c 8b       	std	Y+20, r25	; 0x14
    1770:	8b 8b       	std	Y+19, r24	; 0x13
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <PW_Init+0x2c4>
    1774:	88 ec       	ldi	r24, 0xC8	; 200
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9a 8b       	std	Y+18, r25	; 0x12
    177a:	89 8b       	std	Y+17, r24	; 0x11
    177c:	89 89       	ldd	r24, Y+17	; 0x11
    177e:	9a 89       	ldd	r25, Y+18	; 0x12
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <PW_Init+0x2b2>
    1784:	9a 8b       	std	Y+18, r25	; 0x12
    1786:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9c 8b       	std	Y+20, r25	; 0x14
    1790:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	8b 89       	ldd	r24, Y+19	; 0x13
    1794:	9c 89       	ldd	r25, Y+20	; 0x14
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	69 f7       	brne	.-38     	; 0x1774 <PW_Init+0x2a6>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <PW_Init+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	6d 89       	ldd	r22, Y+21	; 0x15
    179e:	7e 89       	ldd	r23, Y+22	; 0x16
    17a0:	8f 89       	ldd	r24, Y+23	; 0x17
    17a2:	98 8d       	ldd	r25, Y+24	; 0x18
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9c 8b       	std	Y+20, r25	; 0x14
    17ae:	8b 8b       	std	Y+19, r24	; 0x13
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	98 8b       	std	Y+16, r25	; 0x10
    17b6:	8f 87       	std	Y+15, r24	; 0x0f
    17b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ba:	98 89       	ldd	r25, Y+16	; 0x10
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <PW_Init+0x2ee>
    17c0:	98 8b       	std	Y+16, r25	; 0x10
    17c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	User_Two_PW = eeprom_read_byte((uint8*) 62);
    17c4:	8e e3       	ldi	r24, 0x3E	; 62
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__eerd_byte_m32>
    17cc:	80 93 f7 01 	sts	0x01F7, r24

	eeprom_update_byte((uint8*) 63, 196); // Write 196 to EEPROM address 63
    17d0:	8f e3       	ldi	r24, 0x3F	; 63
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	64 ec       	ldi	r22, 0xC4	; 196
    17d6:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__eeupd_byte_m32>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e2       	ldi	r26, 0x20	; 32
    17e0:	b1 e4       	ldi	r27, 0x41	; 65
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
    17e4:	9c 87       	std	Y+12, r25	; 0x0c
    17e6:	ad 87       	std	Y+13, r26	; 0x0d
    17e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8f 83       	std	Y+7, r24	; 0x07
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	a9 87       	std	Y+9, r26	; 0x09
    1808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <PW_Init+0x35e>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <PW_Init+0x3dc>
	else if (__tmp > 65535)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <PW_Init+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	0f c0       	rjmp	.+30     	; 0x188c <PW_Init+0x3be>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <PW_Init+0x3ac>
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <PW_Init+0x3a0>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <PW_Init+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <PW_Init+0x3e8>
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	User_Three_PW = eeprom_read_byte((uint8*) 63);
    18be:	8f e3       	ldi	r24, 0x3F	; 63
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__eerd_byte_m32>
    18c6:	80 93 f4 01 	sts	0x01F4, r24
}
    18ca:	e8 96       	adiw	r28, 0x38	; 56
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <Main_Menu>:

void Main_Menu(void) {
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    18e4:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
	if (key == 4) { //Only admin can add or remove user and control door
    18e8:	80 91 f2 01 	lds	r24, 0x01F2
    18ec:	84 30       	cpi	r24, 0x04	; 4
    18ee:	21 f4       	brne	.+8      	; 0x18f8 <Main_Menu+0x1c>
		LCD_displayString("+RemoveUser%Door");
    18f0:	8b ea       	ldi	r24, 0xAB	; 171
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
	}
	LCD_moveCursor(1, 0);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_moveCursor>
	LCD_displayString("X:TurnON/OFFLEDS");
    1900:	8c eb       	ldi	r24, 0xBC	; 188
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>

}
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <AC>:

void AC(void) {
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62

	/* When the user logged successfully , he can edit the AC */

	temp_value = LM35_getTemperature();
    1916:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LM35_getTemperature>
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	90 93 f6 01 	sts	0x01F6, r25
    1922:	80 93 f5 01 	sts	0x01F5, r24

	if (temp_value < 21) {
    1926:	80 91 f5 01 	lds	r24, 0x01F5
    192a:	90 91 f6 01 	lds	r25, 0x01F6
    192e:	85 31       	cpi	r24, 0x15	; 21
    1930:	91 05       	cpc	r25, r1
    1932:	28 f4       	brcc	.+10     	; 0x193e <AC+0x30>
		DcMotor_Rotate(Stop, 0);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DcMotor_Rotate>
    193c:	0b c0       	rjmp	.+22     	; 0x1954 <AC+0x46>
	} else if (temp_value > 28) {
    193e:	80 91 f5 01 	lds	r24, 0x01F5
    1942:	90 91 f6 01 	lds	r25, 0x01F6
    1946:	8d 31       	cpi	r24, 0x1D	; 29
    1948:	91 05       	cpc	r25, r1
    194a:	20 f0       	brcs	.+8      	; 0x1954 <AC+0x46>
		DcMotor_Rotate(CW, 100);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	64 e6       	ldi	r22, 0x64	; 100
    1950:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DcMotor_Rotate>
	}

}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <Timer1_Fast_PWM_Init>:

void Timer1_Fast_PWM_Init(unsigned short duty_cycle) {
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <Timer1_Fast_PWM_Init+0x6>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;
    1968:	ec e4       	ldi	r30, 0x4C	; 76
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	11 82       	std	Z+1, r1	; 0x01
    196e:	10 82       	st	Z, r1
	ICR1 = 2499;
    1970:	e6 e4       	ldi	r30, 0x46	; 70
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	83 ec       	ldi	r24, 0xC3	; 195
    1976:	99 e0       	ldi	r25, 0x09	; 9
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
	OCR1A = duty_cycle;
    197c:	ea e4       	ldi	r30, 0x4A	; 74
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
	TCCR1A = (1 << WGM11) | (1 << COM1A1);
    1988:	ef e4       	ldi	r30, 0x4F	; 79
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	82 e8       	ldi	r24, 0x82	; 130
    198e:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS11);
    1990:	ee e4       	ldi	r30, 0x4E	; 78
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8b e1       	ldi	r24, 0x1B	; 27
    1996:	80 83       	st	Z, r24
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <Door_Servo>:

void Door_Servo(void) {
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	aa 97       	sbiw	r28, 0x2a	; 42
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	65 e0       	ldi	r22, 0x05	; 5
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	Timer1_Fast_PWM_Init(124);
    19c0:	8c e7       	ldi	r24, 0x7C	; 124
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 ad 0c 	call	0x195a	; 0x195a <Timer1_Fast_PWM_Init>
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e8       	ldi	r25, 0x80	; 128
    19cc:	ab eb       	ldi	r26, 0xBB	; 187
    19ce:	b4 e4       	ldi	r27, 0x44	; 68
    19d0:	8f a3       	std	Y+39, r24	; 0x27
    19d2:	98 a7       	std	Y+40, r25	; 0x28
    19d4:	a9 a7       	std	Y+41, r26	; 0x29
    19d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d8:	6f a1       	ldd	r22, Y+39	; 0x27
    19da:	78 a5       	ldd	r23, Y+40	; 0x28
    19dc:	89 a5       	ldd	r24, Y+41	; 0x29
    19de:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a ef       	ldi	r20, 0xFA	; 250
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8b a3       	std	Y+35, r24	; 0x23
    19f2:	9c a3       	std	Y+36, r25	; 0x24
    19f4:	ad a3       	std	Y+37, r26	; 0x25
    19f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19f8:	6b a1       	ldd	r22, Y+35	; 0x23
    19fa:	7c a1       	ldd	r23, Y+36	; 0x24
    19fc:	8d a1       	ldd	r24, Y+37	; 0x25
    19fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <Door_Servo+0x78>
		__ticks = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9a a3       	std	Y+34, r25	; 0x22
    1a16:	89 a3       	std	Y+33, r24	; 0x21
    1a18:	3f c0       	rjmp	.+126    	; 0x1a98 <Door_Servo+0xf6>
	else if (__tmp > 65535)
    1a1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a20:	9e a1       	ldd	r25, Y+38	; 0x26
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	4c f5       	brge	.+82     	; 0x1a84 <Door_Servo+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	6f a1       	ldd	r22, Y+39	; 0x27
    1a34:	78 a5       	ldd	r23, Y+40	; 0x28
    1a36:	89 a5       	ldd	r24, Y+41	; 0x29
    1a38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e2       	ldi	r20, 0x20	; 32
    1a40:	51 e4       	ldi	r21, 0x41	; 65
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9a a3       	std	Y+34, r25	; 0x22
    1a58:	89 a3       	std	Y+33, r24	; 0x21
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <Door_Servo+0xd8>
    1a5c:	88 ec       	ldi	r24, 0xC8	; 200
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	98 a3       	std	Y+32, r25	; 0x20
    1a62:	8f 8f       	std	Y+31, r24	; 0x1f
    1a64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a66:	98 a1       	ldd	r25, Y+32	; 0x20
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <Door_Servo+0xc6>
    1a6c:	98 a3       	std	Y+32, r25	; 0x20
    1a6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	89 a1       	ldd	r24, Y+33	; 0x21
    1a72:	9a a1       	ldd	r25, Y+34	; 0x22
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	9a a3       	std	Y+34, r25	; 0x22
    1a78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	69 f7       	brne	.-38     	; 0x1a5c <Door_Servo+0xba>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <Door_Servo+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	6b a1       	ldd	r22, Y+35	; 0x23
    1a86:	7c a1       	ldd	r23, Y+36	; 0x24
    1a88:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9a a3       	std	Y+34, r25	; 0x22
    1a96:	89 a3       	std	Y+33, r24	; 0x21
    1a98:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <Door_Servo+0x102>
    1aa8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aaa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	Timer1_Fast_PWM_Init(187);
    1aac:	8b eb       	ldi	r24, 0xBB	; 187
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 ad 0c 	call	0x195a	; 0x195a <Timer1_Fast_PWM_Init>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e8       	ldi	r25, 0x80	; 128
    1ab8:	ab eb       	ldi	r26, 0xBB	; 187
    1aba:	b4 e4       	ldi	r27, 0x44	; 68
    1abc:	89 8f       	std	Y+25, r24	; 0x19
    1abe:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a ef       	ldi	r20, 0xFA	; 250
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	8d 8b       	std	Y+21, r24	; 0x15
    1ade:	9e 8b       	std	Y+22, r25	; 0x16
    1ae0:	af 8b       	std	Y+23, r26	; 0x17
    1ae2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 8d       	ldd	r25, Y+24	; 0x18
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <Door_Servo+0x164>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 8b       	std	Y+20, r25	; 0x14
    1b02:	8b 8b       	std	Y+19, r24	; 0x13
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <Door_Servo+0x1e2>
	else if (__tmp > 65535)
    1b06:	6d 89       	ldd	r22, Y+21	; 0x15
    1b08:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	4c f5       	brge	.+82     	; 0x1b70 <Door_Servo+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9c 8b       	std	Y+20, r25	; 0x14
    1b44:	8b 8b       	std	Y+19, r24	; 0x13
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <Door_Servo+0x1c4>
    1b48:	88 ec       	ldi	r24, 0xC8	; 200
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9a 8b       	std	Y+18, r25	; 0x12
    1b4e:	89 8b       	std	Y+17, r24	; 0x11
    1b50:	89 89       	ldd	r24, Y+17	; 0x11
    1b52:	9a 89       	ldd	r25, Y+18	; 0x12
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <Door_Servo+0x1b2>
    1b58:	9a 8b       	std	Y+18, r25	; 0x12
    1b5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	8b 89       	ldd	r24, Y+19	; 0x13
    1b68:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	69 f7       	brne	.-38     	; 0x1b48 <Door_Servo+0x1a6>
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <Door_Servo+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	6d 89       	ldd	r22, Y+21	; 0x15
    1b72:	7e 89       	ldd	r23, Y+22	; 0x16
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9c 8b       	std	Y+20, r25	; 0x14
    1b82:	8b 8b       	std	Y+19, r24	; 0x13
    1b84:	8b 89       	ldd	r24, Y+19	; 0x13
    1b86:	9c 89       	ldd	r25, Y+20	; 0x14
    1b88:	98 8b       	std	Y+16, r25	; 0x10
    1b8a:	8f 87       	std	Y+15, r24	; 0x0f
    1b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8e:	98 89       	ldd	r25, Y+16	; 0x10
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <Door_Servo+0x1ee>
    1b94:	98 8b       	std	Y+16, r25	; 0x10
    1b96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	Timer1_Fast_PWM_Init(250);
    1b98:	8a ef       	ldi	r24, 0xFA	; 250
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 ad 0c 	call	0x195a	; 0x195a <Timer1_Fast_PWM_Init>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e8       	ldi	r25, 0x80	; 128
    1ba4:	ab eb       	ldi	r26, 0xBB	; 187
    1ba6:	b4 e4       	ldi	r27, 0x44	; 68
    1ba8:	8b 87       	std	Y+11, r24	; 0x0b
    1baa:	9c 87       	std	Y+12, r25	; 0x0c
    1bac:	ad 87       	std	Y+13, r26	; 0x0d
    1bae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	98 87       	std	Y+8, r25	; 0x08
    1bcc:	a9 87       	std	Y+9, r26	; 0x09
    1bce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <Door_Servo+0x250>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <Door_Servo+0x2ce>
	else if (__tmp > 65535)
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <Door_Servo+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <Door_Servo+0x2b0>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 83       	std	Y+4, r25	; 0x04
    1c3a:	8b 83       	std	Y+3, r24	; 0x03
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <Door_Servo+0x29e>
    1c44:	9c 83       	std	Y+4, r25	; 0x04
    1c46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <Door_Servo+0x292>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <Door_Servo+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <Door_Servo+0x2da>
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);

}
    1c84:	aa 96       	adiw	r28, 0x2a	; 42
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <LED_Init>:

void LED_Init(void) {
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_OUTPUT);
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	62 e0       	ldi	r22, 0x02	; 2
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN2_ID, LOGIC_LOW);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	62 e0       	ldi	r22, 0x02	; 2
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>

}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <Users_Remove_Menu>:

void Users_Remove_Menu(void) {
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1cc0:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LCD_clearScreen>
	LCD_displayString("+User 1  -User 2");
    1cc4:	8d ec       	ldi	r24, 0xCD	; 205
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_moveCursor>
	LCD_displayString("* User 3");
    1cd4:	8e ed       	ldi	r24, 0xDE	; 222
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <GPIO_setupPinDirection+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <GPIO_setupPinDirection+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	6a 83       	std	Y+2, r22	; 0x02
    1cf4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	88 30       	cpi	r24, 0x08	; 8
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <GPIO_setupPinDirection+0x1c>
    1cfc:	d5 c0       	rjmp	.+426    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <GPIO_setupPinDirection+0x24>
    1d04:	d1 c0       	rjmp	.+418    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	3d 83       	std	Y+5, r19	; 0x05
    1d0e:	2c 83       	std	Y+4, r18	; 0x04
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	9d 81       	ldd	r25, Y+5	; 0x05
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <GPIO_setupPinDirection+0x3a>
    1d1a:	43 c0       	rjmp	.+134    	; 0x1da2 <GPIO_setupPinDirection+0xc0>
    1d1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	31 05       	cpc	r19, r1
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <GPIO_setupPinDirection+0x4e>
    1d26:	8c 81       	ldd	r24, Y+4	; 0x04
    1d28:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	71 f0       	breq	.+28     	; 0x1d4a <GPIO_setupPinDirection+0x68>
    1d2e:	bc c0       	rjmp	.+376    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
    1d30:	2c 81       	ldd	r18, Y+4	; 0x04
    1d32:	3d 81       	ldd	r19, Y+5	; 0x05
    1d34:	22 30       	cpi	r18, 0x02	; 2
    1d36:	31 05       	cpc	r19, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <GPIO_setupPinDirection+0x5a>
    1d3a:	5f c0       	rjmp	.+190    	; 0x1dfa <GPIO_setupPinDirection+0x118>
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d40:	83 30       	cpi	r24, 0x03	; 3
    1d42:	91 05       	cpc	r25, r1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <GPIO_setupPinDirection+0x66>
    1d46:	85 c0       	rjmp	.+266    	; 0x1e52 <GPIO_setupPinDirection+0x170>
    1d48:	af c0       	rjmp	.+350    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	a1 f4       	brne	.+40     	; 0x1d78 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d50:	aa e3       	ldi	r26, 0x3A	; 58
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ea e3       	ldi	r30, 0x3A	; 58
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <GPIO_setupPinDirection+0x8c>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <GPIO_setupPinDirection+0x88>
    1d72:	84 2b       	or	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	98 c0       	rjmp	.+304    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d78:	aa e3       	ldi	r26, 0x3A	; 58
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	ea e3       	ldi	r30, 0x3A	; 58
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <GPIO_setupPinDirection+0xb4>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <GPIO_setupPinDirection+0xb0>
    1d9a:	80 95       	com	r24
    1d9c:	84 23       	and	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	83 c0       	rjmp	.+262    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	a1 f4       	brne	.+40     	; 0x1dd0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1da8:	a7 e3       	ldi	r26, 0x37	; 55
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e7 e3       	ldi	r30, 0x37	; 55
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GPIO_setupPinDirection+0xe4>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <GPIO_setupPinDirection+0xe0>
    1dca:	84 2b       	or	r24, r20
    1dcc:	8c 93       	st	X, r24
    1dce:	6c c0       	rjmp	.+216    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dd0:	a7 e3       	ldi	r26, 0x37	; 55
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e7 e3       	ldi	r30, 0x37	; 55
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <GPIO_setupPinDirection+0x10c>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <GPIO_setupPinDirection+0x108>
    1df2:	80 95       	com	r24
    1df4:	84 23       	and	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	57 c0       	rjmp	.+174    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	a1 f4       	brne	.+40     	; 0x1e28 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e00:	a4 e3       	ldi	r26, 0x34	; 52
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e4 e3       	ldi	r30, 0x34	; 52
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <GPIO_setupPinDirection+0x13c>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <GPIO_setupPinDirection+0x138>
    1e22:	84 2b       	or	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	40 c0       	rjmp	.+128    	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e28:	a4 e3       	ldi	r26, 0x34	; 52
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e4 e3       	ldi	r30, 0x34	; 52
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <GPIO_setupPinDirection+0x164>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <GPIO_setupPinDirection+0x160>
    1e4a:	80 95       	com	r24
    1e4c:	84 23       	and	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	2b c0       	rjmp	.+86     	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	a1 f4       	brne	.+40     	; 0x1e80 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e58:	a1 e3       	ldi	r26, 0x31	; 49
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e1 e3       	ldi	r30, 0x31	; 49
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GPIO_setupPinDirection+0x194>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GPIO_setupPinDirection+0x190>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e80:	a1 e3       	ldi	r26, 0x31	; 49
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e1 e3       	ldi	r30, 0x31	; 49
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <GPIO_setupPinDirection+0x1bc>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <GPIO_setupPinDirection+0x1b8>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <GPIO_writePin+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <GPIO_writePin+0x8>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	6a 83       	std	Y+2, r22	; 0x02
    1eca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	88 30       	cpi	r24, 0x08	; 8
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <GPIO_writePin+0x1c>
    1ed2:	d5 c0       	rjmp	.+426    	; 0x207e <GPIO_writePin+0x1c6>
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	08 f0       	brcs	.+2      	; 0x1edc <GPIO_writePin+0x24>
    1eda:	d1 c0       	rjmp	.+418    	; 0x207e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3d 83       	std	Y+5, r19	; 0x05
    1ee4:	2c 83       	std	Y+4, r18	; 0x04
    1ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <GPIO_writePin+0x3a>
    1ef0:	43 c0       	rjmp	.+134    	; 0x1f78 <GPIO_writePin+0xc0>
    1ef2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <GPIO_writePin+0x4e>
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	71 f0       	breq	.+28     	; 0x1f20 <GPIO_writePin+0x68>
    1f04:	bc c0       	rjmp	.+376    	; 0x207e <GPIO_writePin+0x1c6>
    1f06:	2c 81       	ldd	r18, Y+4	; 0x04
    1f08:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <GPIO_writePin+0x5a>
    1f10:	5f c0       	rjmp	.+190    	; 0x1fd0 <GPIO_writePin+0x118>
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	83 30       	cpi	r24, 0x03	; 3
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <GPIO_writePin+0x66>
    1f1c:	85 c0       	rjmp	.+266    	; 0x2028 <GPIO_writePin+0x170>
    1f1e:	af c0       	rjmp	.+350    	; 0x207e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	a1 f4       	brne	.+40     	; 0x1f4e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f26:	ab e3       	ldi	r26, 0x3B	; 59
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <GPIO_writePin+0x8c>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <GPIO_writePin+0x88>
    1f48:	84 2b       	or	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	98 c0       	rjmp	.+304    	; 0x207e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f4e:	ab e3       	ldi	r26, 0x3B	; 59
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	eb e3       	ldi	r30, 0x3B	; 59
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	48 2f       	mov	r20, r24
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	02 2e       	mov	r0, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <GPIO_writePin+0xb4>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	0a 94       	dec	r0
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <GPIO_writePin+0xb0>
    1f70:	80 95       	com	r24
    1f72:	84 23       	and	r24, r20
    1f74:	8c 93       	st	X, r24
    1f76:	83 c0       	rjmp	.+262    	; 0x207e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	a1 f4       	brne	.+40     	; 0x1fa6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f7e:	a8 e3       	ldi	r26, 0x38	; 56
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e8 e3       	ldi	r30, 0x38	; 56
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	48 2f       	mov	r20, r24
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <GPIO_writePin+0xe4>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <GPIO_writePin+0xe0>
    1fa0:	84 2b       	or	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	6c c0       	rjmp	.+216    	; 0x207e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fa6:	a8 e3       	ldi	r26, 0x38	; 56
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e8 e3       	ldi	r30, 0x38	; 56
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 2e       	mov	r0, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <GPIO_writePin+0x10c>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <GPIO_writePin+0x108>
    1fc8:	80 95       	com	r24
    1fca:	84 23       	and	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	57 c0       	rjmp	.+174    	; 0x207e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	a1 f4       	brne	.+40     	; 0x1ffe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1fd6:	a5 e3       	ldi	r26, 0x35	; 53
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e5 e3       	ldi	r30, 0x35	; 53
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <GPIO_writePin+0x13c>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <GPIO_writePin+0x138>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	40 c0       	rjmp	.+128    	; 0x207e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ffe:	a5 e3       	ldi	r26, 0x35	; 53
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e3       	ldi	r30, 0x35	; 53
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <GPIO_writePin+0x164>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <GPIO_writePin+0x160>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	2b c0       	rjmp	.+86     	; 0x207e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	a1 f4       	brne	.+40     	; 0x2056 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    202e:	a2 e3       	ldi	r26, 0x32	; 50
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e2 e3       	ldi	r30, 0x32	; 50
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_writePin+0x194>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_writePin+0x190>
    2050:	84 2b       	or	r24, r20
    2052:	8c 93       	st	X, r24
    2054:	14 c0       	rjmp	.+40     	; 0x207e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2056:	a2 e3       	ldi	r26, 0x32	; 50
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e2 e3       	ldi	r30, 0x32	; 50
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <GPIO_writePin+0x1bc>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <GPIO_writePin+0x1b8>
    2078:	80 95       	com	r24
    207a:	84 23       	and	r24, r20
    207c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <GPIO_readPin+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <GPIO_readPin+0x8>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20a0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	88 30       	cpi	r24, 0x08	; 8
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <GPIO_readPin+0x1c>
    20a8:	84 c0       	rjmp	.+264    	; 0x21b2 <GPIO_readPin+0x124>
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	08 f0       	brcs	.+2      	; 0x20b2 <GPIO_readPin+0x24>
    20b0:	80 c0       	rjmp	.+256    	; 0x21b2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3d 83       	std	Y+5, r19	; 0x05
    20ba:	2c 83       	std	Y+4, r18	; 0x04
    20bc:	4c 81       	ldd	r20, Y+4	; 0x04
    20be:	5d 81       	ldd	r21, Y+5	; 0x05
    20c0:	41 30       	cpi	r20, 0x01	; 1
    20c2:	51 05       	cpc	r21, r1
    20c4:	79 f1       	breq	.+94     	; 0x2124 <GPIO_readPin+0x96>
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	91 05       	cpc	r25, r1
    20ce:	34 f4       	brge	.+12     	; 0x20dc <GPIO_readPin+0x4e>
    20d0:	2c 81       	ldd	r18, Y+4	; 0x04
    20d2:	3d 81       	ldd	r19, Y+5	; 0x05
    20d4:	21 15       	cp	r18, r1
    20d6:	31 05       	cpc	r19, r1
    20d8:	69 f0       	breq	.+26     	; 0x20f4 <GPIO_readPin+0x66>
    20da:	6b c0       	rjmp	.+214    	; 0x21b2 <GPIO_readPin+0x124>
    20dc:	4c 81       	ldd	r20, Y+4	; 0x04
    20de:	5d 81       	ldd	r21, Y+5	; 0x05
    20e0:	42 30       	cpi	r20, 0x02	; 2
    20e2:	51 05       	cpc	r21, r1
    20e4:	b9 f1       	breq	.+110    	; 0x2154 <GPIO_readPin+0xc6>
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	83 30       	cpi	r24, 0x03	; 3
    20ec:	91 05       	cpc	r25, r1
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <GPIO_readPin+0x64>
    20f0:	49 c0       	rjmp	.+146    	; 0x2184 <GPIO_readPin+0xf6>
    20f2:	5f c0       	rjmp	.+190    	; 0x21b2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20f4:	e9 e3       	ldi	r30, 0x39	; 57
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a9 01       	movw	r20, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <GPIO_readPin+0x7e>
    2108:	55 95       	asr	r21
    210a:	47 95       	ror	r20
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <GPIO_readPin+0x7a>
    2110:	ca 01       	movw	r24, r20
    2112:	81 70       	andi	r24, 0x01	; 1
    2114:	90 70       	andi	r25, 0x00	; 0
    2116:	88 23       	and	r24, r24
    2118:	19 f0       	breq	.+6      	; 0x2120 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	49 c0       	rjmp	.+146    	; 0x21b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	47 c0       	rjmp	.+142    	; 0x21b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2124:	e6 e3       	ldi	r30, 0x36	; 54
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a9 01       	movw	r20, r18
    2136:	02 c0       	rjmp	.+4      	; 0x213c <GPIO_readPin+0xae>
    2138:	55 95       	asr	r21
    213a:	47 95       	ror	r20
    213c:	8a 95       	dec	r24
    213e:	e2 f7       	brpl	.-8      	; 0x2138 <GPIO_readPin+0xaa>
    2140:	ca 01       	movw	r24, r20
    2142:	81 70       	andi	r24, 0x01	; 1
    2144:	90 70       	andi	r25, 0x00	; 0
    2146:	88 23       	and	r24, r24
    2148:	19 f0       	breq	.+6      	; 0x2150 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	31 c0       	rjmp	.+98     	; 0x21b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2150:	19 82       	std	Y+1, r1	; 0x01
    2152:	2f c0       	rjmp	.+94     	; 0x21b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2154:	e3 e3       	ldi	r30, 0x33	; 51
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a9 01       	movw	r20, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <GPIO_readPin+0xde>
    2168:	55 95       	asr	r21
    216a:	47 95       	ror	r20
    216c:	8a 95       	dec	r24
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <GPIO_readPin+0xda>
    2170:	ca 01       	movw	r24, r20
    2172:	81 70       	andi	r24, 0x01	; 1
    2174:	90 70       	andi	r25, 0x00	; 0
    2176:	88 23       	and	r24, r24
    2178:	19 f0       	breq	.+6      	; 0x2180 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	19 c0       	rjmp	.+50     	; 0x21b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2180:	19 82       	std	Y+1, r1	; 0x01
    2182:	17 c0       	rjmp	.+46     	; 0x21b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2184:	e0 e3       	ldi	r30, 0x30	; 48
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a9 01       	movw	r20, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <GPIO_readPin+0x10e>
    2198:	55 95       	asr	r21
    219a:	47 95       	ror	r20
    219c:	8a 95       	dec	r24
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <GPIO_readPin+0x10a>
    21a0:	ca 01       	movw	r24, r20
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	88 23       	and	r24, r24
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21b0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <GPIO_setupPortDirection+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <GPIO_setupPortDirection+0x8>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	84 30       	cpi	r24, 0x04	; 4
    21d8:	90 f5       	brcc	.+100    	; 0x223e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	3c 83       	std	Y+4, r19	; 0x04
    21e2:	2b 83       	std	Y+3, r18	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	91 05       	cpc	r25, r1
    21ec:	d1 f0       	breq	.+52     	; 0x2222 <GPIO_setupPortDirection+0x5e>
    21ee:	2b 81       	ldd	r18, Y+3	; 0x03
    21f0:	3c 81       	ldd	r19, Y+4	; 0x04
    21f2:	22 30       	cpi	r18, 0x02	; 2
    21f4:	31 05       	cpc	r19, r1
    21f6:	2c f4       	brge	.+10     	; 0x2202 <GPIO_setupPortDirection+0x3e>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	61 f0       	breq	.+24     	; 0x2218 <GPIO_setupPortDirection+0x54>
    2200:	1e c0       	rjmp	.+60     	; 0x223e <GPIO_setupPortDirection+0x7a>
    2202:	2b 81       	ldd	r18, Y+3	; 0x03
    2204:	3c 81       	ldd	r19, Y+4	; 0x04
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	31 05       	cpc	r19, r1
    220a:	81 f0       	breq	.+32     	; 0x222c <GPIO_setupPortDirection+0x68>
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	91 05       	cpc	r25, r1
    2214:	81 f0       	breq	.+32     	; 0x2236 <GPIO_setupPortDirection+0x72>
    2216:	13 c0       	rjmp	.+38     	; 0x223e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2218:	ea e3       	ldi	r30, 0x3A	; 58
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	80 83       	st	Z, r24
    2220:	0e c0       	rjmp	.+28     	; 0x223e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2222:	e7 e3       	ldi	r30, 0x37	; 55
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	80 83       	st	Z, r24
    222a:	09 c0       	rjmp	.+18     	; 0x223e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    222c:	e4 e3       	ldi	r30, 0x34	; 52
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	80 83       	st	Z, r24
    2234:	04 c0       	rjmp	.+8      	; 0x223e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2236:	e1 e3       	ldi	r30, 0x31	; 49
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	80 83       	st	Z, r24
			break;
		}
	}
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <GPIO_writePort+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <GPIO_writePort+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	84 30       	cpi	r24, 0x04	; 4
    2260:	90 f5       	brcc	.+100    	; 0x22c6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	3c 83       	std	Y+4, r19	; 0x04
    226a:	2b 83       	std	Y+3, r18	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	91 05       	cpc	r25, r1
    2274:	d1 f0       	breq	.+52     	; 0x22aa <GPIO_writePort+0x5e>
    2276:	2b 81       	ldd	r18, Y+3	; 0x03
    2278:	3c 81       	ldd	r19, Y+4	; 0x04
    227a:	22 30       	cpi	r18, 0x02	; 2
    227c:	31 05       	cpc	r19, r1
    227e:	2c f4       	brge	.+10     	; 0x228a <GPIO_writePort+0x3e>
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	61 f0       	breq	.+24     	; 0x22a0 <GPIO_writePort+0x54>
    2288:	1e c0       	rjmp	.+60     	; 0x22c6 <GPIO_writePort+0x7a>
    228a:	2b 81       	ldd	r18, Y+3	; 0x03
    228c:	3c 81       	ldd	r19, Y+4	; 0x04
    228e:	22 30       	cpi	r18, 0x02	; 2
    2290:	31 05       	cpc	r19, r1
    2292:	81 f0       	breq	.+32     	; 0x22b4 <GPIO_writePort+0x68>
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	83 30       	cpi	r24, 0x03	; 3
    229a:	91 05       	cpc	r25, r1
    229c:	81 f0       	breq	.+32     	; 0x22be <GPIO_writePort+0x72>
    229e:	13 c0       	rjmp	.+38     	; 0x22c6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22a0:	eb e3       	ldi	r30, 0x3B	; 59
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	80 83       	st	Z, r24
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22aa:	e8 e3       	ldi	r30, 0x38	; 56
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	80 83       	st	Z, r24
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22b4:	e5 e3       	ldi	r30, 0x35	; 53
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	80 83       	st	Z, r24
    22bc:	04 c0       	rjmp	.+8      	; 0x22c6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22be:	e2 e3       	ldi	r30, 0x32	; 50
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	80 83       	st	Z, r24
			break;
		}
	}
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	00 d0       	rcall	.+0      	; 0x22da <GPIO_readPort+0x6>
    22da:	00 d0       	rcall	.+0      	; 0x22dc <GPIO_readPort+0x8>
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22e2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	84 30       	cpi	r24, 0x04	; 4
    22e8:	90 f5       	brcc	.+100    	; 0x234e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	3c 83       	std	Y+4, r19	; 0x04
    22f2:	2b 83       	std	Y+3, r18	; 0x03
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	91 05       	cpc	r25, r1
    22fc:	d1 f0       	breq	.+52     	; 0x2332 <GPIO_readPort+0x5e>
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	22 30       	cpi	r18, 0x02	; 2
    2304:	31 05       	cpc	r19, r1
    2306:	2c f4       	brge	.+10     	; 0x2312 <GPIO_readPort+0x3e>
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	61 f0       	breq	.+24     	; 0x2328 <GPIO_readPort+0x54>
    2310:	1e c0       	rjmp	.+60     	; 0x234e <GPIO_readPort+0x7a>
    2312:	2b 81       	ldd	r18, Y+3	; 0x03
    2314:	3c 81       	ldd	r19, Y+4	; 0x04
    2316:	22 30       	cpi	r18, 0x02	; 2
    2318:	31 05       	cpc	r19, r1
    231a:	81 f0       	breq	.+32     	; 0x233c <GPIO_readPort+0x68>
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	83 30       	cpi	r24, 0x03	; 3
    2322:	91 05       	cpc	r25, r1
    2324:	81 f0       	breq	.+32     	; 0x2346 <GPIO_readPort+0x72>
    2326:	13 c0       	rjmp	.+38     	; 0x234e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2328:	e9 e3       	ldi	r30, 0x39	; 57
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	0e c0       	rjmp	.+28     	; 0x234e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2332:	e6 e3       	ldi	r30, 0x36	; 54
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	09 c0       	rjmp	.+18     	; 0x234e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    233c:	e3 e3       	ldi	r30, 0x33	; 51
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	04 c0       	rjmp	.+8      	; 0x234e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2346:	e0 e3       	ldi	r30, 0x30	; 48
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <KEYPAD_getPressedKey>:
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number);
#elif (Keypad_Cols == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif

uint8 KEYPAD_getPressedKey(void){
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	60 97       	sbiw	r28, 0x10	; 16
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61

	uint8 row,col; /*3shan loop*/
	/* ROWS IP -- Configure 3shan lw kolo msh f nfs l port*/

	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin,PIN_INPUT);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	64 e0       	ldi	r22, 0x04	; 4
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+1,PIN_INPUT);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	65 e0       	ldi	r22, 0x05	; 5
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+2,PIN_INPUT);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	66 e0       	ldi	r22, 0x06	; 6
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+3,PIN_INPUT);
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	67 e0       	ldi	r22, 0x07	; 7
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>

	/* Cols IP -- Configure 3shan lw kolo msh f nfs l port*/

	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin,PIN_INPUT);
    239a:	83 e0       	ldi	r24, 0x03	; 3
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+1,PIN_INPUT);
    23a4:	83 e0       	ldi	r24, 0x03	; 3
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+2,PIN_INPUT);
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>

	#if (Keypad_Cols == 4)
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+3,PIN_INPUT); 	/*if 4x4*/
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	#endif

	while(1){

		for (row=0;row<Keypad_Rows;row++){
    23c2:	18 8a       	std	Y+16, r1	; 0x10
    23c4:	b1 c0       	rjmp	.+354    	; 0x2528 <KEYPAD_getPressedKey+0x1ca>

			GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_OUTPUT);
    23c6:	88 89       	ldd	r24, Y+16	; 0x10
    23c8:	98 2f       	mov	r25, r24
    23ca:	9c 5f       	subi	r25, 0xFC	; 252
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	69 2f       	mov	r22, r25
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
			GPIO_writePin(Keypad_Rows_Port,Keypad_Rows_Pin+row,Button_Press);
    23d6:	88 89       	ldd	r24, Y+16	; 0x10
    23d8:	98 2f       	mov	r25, r24
    23da:	9c 5f       	subi	r25, 0xFC	; 252
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	69 2f       	mov	r22, r25
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>

				for(col=0;col<Keypad_Cols;col++){
    23e6:	1f 86       	std	Y+15, r1	; 0x0f
    23e8:	1f c0       	rjmp	.+62     	; 0x2428 <KEYPAD_getPressedKey+0xca>

					if( GPIO_readPin(Keypad_Cols_Port,Keypad_Cols_Pin+col) == Button_Press ){
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    23ee:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_readPin>
    23f2:	88 23       	and	r24, r24
    23f4:	b1 f4       	brne	.+44     	; 0x2422 <KEYPAD_getPressedKey+0xc4>

						#if (Keypad_Cols == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*Keypad_Cols)+col+1);
						#elif (Keypad_Cols == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*Keypad_Cols)+col+1);
    23f6:	88 89       	ldd	r24, Y+16	; 0x10
    23f8:	88 2f       	mov	r24, r24
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	98 2f       	mov	r25, r24
    2406:	8f 85       	ldd	r24, Y+15	; 0x0f
    2408:	89 0f       	add	r24, r25
    240a:	8f 5f       	subi	r24, 0xFF	; 255
    240c:	0e 94 99 12 	call	0x2532	; 0x2532 <KEYPAD_4x4_adjustKeyNumber>


	}/*END while*/


}/*END FN*/
    2410:	60 96       	adiw	r28, 0x10	; 16
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret
		for (row=0;row<Keypad_Rows;row++){

			GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_OUTPUT);
			GPIO_writePin(Keypad_Rows_Port,Keypad_Rows_Pin+row,Button_Press);

				for(col=0;col<Keypad_Cols;col++){
    2422:	8f 85       	ldd	r24, Y+15	; 0x0f
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	8f 87       	std	Y+15, r24	; 0x0f
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	84 30       	cpi	r24, 0x04	; 4
    242c:	f0 f2       	brcs	.-68     	; 0x23ea <KEYPAD_getPressedKey+0x8c>
						/*return (row*Keypad_Cols)+col+1;*/
					}

				}/*END col loop*/

			GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_INPUT);
    242e:	88 89       	ldd	r24, Y+16	; 0x10
    2430:	98 2f       	mov	r25, r24
    2432:	9c 5f       	subi	r25, 0xFC	; 252
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	69 2f       	mov	r22, r25
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 ea       	ldi	r26, 0xA0	; 160
    2444:	b0 e4       	ldi	r27, 0x40	; 64
    2446:	8b 87       	std	Y+11, r24	; 0x0b
    2448:	9c 87       	std	Y+12, r25	; 0x0c
    244a:	ad 87       	std	Y+13, r26	; 0x0d
    244c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2450:	7c 85       	ldd	r23, Y+12	; 0x0c
    2452:	8d 85       	ldd	r24, Y+13	; 0x0d
    2454:	9e 85       	ldd	r25, Y+14	; 0x0e
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a ef       	ldi	r20, 0xFA	; 250
    245c:	54 e4       	ldi	r21, 0x44	; 68
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8f 83       	std	Y+7, r24	; 0x07
    2468:	98 87       	std	Y+8, r25	; 0x08
    246a:	a9 87       	std	Y+9, r26	; 0x09
    246c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	3f c0       	rjmp	.+126    	; 0x250e <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <KEYPAD_getPressedKey+0x192>
    24d2:	88 ec       	ldi	r24, 0xC8	; 200
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 83       	std	Y+4, r25	; 0x04
    24d8:	8b 83       	std	Y+3, r24	; 0x03
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <KEYPAD_getPressedKey+0x180>
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <KEYPAD_getPressedKey+0x174>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <KEYPAD_getPressedKey+0x1bc>
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+3,PIN_INPUT); 	/*if 4x4*/
	#endif

	while(1){

		for (row=0;row<Keypad_Rows;row++){
    2522:	88 89       	ldd	r24, Y+16	; 0x10
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	88 8b       	std	Y+16, r24	; 0x10
    2528:	88 89       	ldd	r24, Y+16	; 0x10
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	08 f4       	brcc	.+2      	; 0x2530 <KEYPAD_getPressedKey+0x1d2>
    252e:	4b cf       	rjmp	.-362    	; 0x23c6 <KEYPAD_getPressedKey+0x68>
    2530:	48 cf       	rjmp	.-368    	; 0x23c2 <KEYPAD_getPressedKey+0x64>

00002532 <KEYPAD_4x4_adjustKeyNumber>:
	return keypad_button;
}

#elif (Keypad_Cols == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2538:	00 d0       	rcall	.+0      	; 0x253a <KEYPAD_4x4_adjustKeyNumber+0x8>
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	8a 83       	std	Y+2, r24	; 0x02

		uint8 keypad_button = 0;
    2540:	19 82       	std	Y+1, r1	; 0x01

		switch(button_number)
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	3c 83       	std	Y+4, r19	; 0x04
    254a:	2b 83       	std	Y+3, r18	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	88 30       	cpi	r24, 0x08	; 8
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2556:	70 c0       	rjmp	.+224    	; 0x2638 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2558:	2b 81       	ldd	r18, Y+3	; 0x03
    255a:	3c 81       	ldd	r19, Y+4	; 0x04
    255c:	29 30       	cpi	r18, 0x09	; 9
    255e:	31 05       	cpc	r19, r1
    2560:	5c f5       	brge	.+86     	; 0x25b8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	84 30       	cpi	r24, 0x04	; 4
    2568:	91 05       	cpc	r25, r1
    256a:	09 f4       	brne	.+2      	; 0x256e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    256c:	59 c0       	rjmp	.+178    	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0xee>
    256e:	2b 81       	ldd	r18, Y+3	; 0x03
    2570:	3c 81       	ldd	r19, Y+4	; 0x04
    2572:	25 30       	cpi	r18, 0x05	; 5
    2574:	31 05       	cpc	r19, r1
    2576:	9c f4       	brge	.+38     	; 0x259e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	9c 81       	ldd	r25, Y+4	; 0x04
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	91 05       	cpc	r25, r1
    2580:	09 f4       	brne	.+2      	; 0x2584 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2582:	48 c0       	rjmp	.+144    	; 0x2614 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2584:	2b 81       	ldd	r18, Y+3	; 0x03
    2586:	3c 81       	ldd	r19, Y+4	; 0x04
    2588:	23 30       	cpi	r18, 0x03	; 3
    258a:	31 05       	cpc	r19, r1
    258c:	0c f0       	brlt	.+2      	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    258e:	45 c0       	rjmp	.+138    	; 0x261a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	91 05       	cpc	r25, r1
    2598:	09 f4       	brne	.+2      	; 0x259c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    259a:	39 c0       	rjmp	.+114    	; 0x260e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    259c:	67 c0       	rjmp	.+206    	; 0x266c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	26 30       	cpi	r18, 0x06	; 6
    25a4:	31 05       	cpc	r19, r1
    25a6:	09 f4       	brne	.+2      	; 0x25aa <KEYPAD_4x4_adjustKeyNumber+0x78>
    25a8:	41 c0       	rjmp	.+130    	; 0x262c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	87 30       	cpi	r24, 0x07	; 7
    25b0:	91 05       	cpc	r25, r1
    25b2:	0c f0       	brlt	.+2      	; 0x25b6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    25b4:	3e c0       	rjmp	.+124    	; 0x2632 <KEYPAD_4x4_adjustKeyNumber+0x100>
    25b6:	37 c0       	rjmp	.+110    	; 0x2626 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25b8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ba:	3c 81       	ldd	r19, Y+4	; 0x04
    25bc:	2c 30       	cpi	r18, 0x0C	; 12
    25be:	31 05       	cpc	r19, r1
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    25c2:	46 c0       	rjmp	.+140    	; 0x2650 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	8d 30       	cpi	r24, 0x0D	; 13
    25ca:	91 05       	cpc	r25, r1
    25cc:	5c f4       	brge	.+22     	; 0x25e4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    25ce:	2b 81       	ldd	r18, Y+3	; 0x03
    25d0:	3c 81       	ldd	r19, Y+4	; 0x04
    25d2:	2a 30       	cpi	r18, 0x0A	; 10
    25d4:	31 05       	cpc	r19, r1
    25d6:	b1 f1       	breq	.+108    	; 0x2644 <KEYPAD_4x4_adjustKeyNumber+0x112>
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	8b 30       	cpi	r24, 0x0B	; 11
    25de:	91 05       	cpc	r25, r1
    25e0:	a4 f5       	brge	.+104    	; 0x264a <KEYPAD_4x4_adjustKeyNumber+0x118>
    25e2:	2d c0       	rjmp	.+90     	; 0x263e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    25e4:	2b 81       	ldd	r18, Y+3	; 0x03
    25e6:	3c 81       	ldd	r19, Y+4	; 0x04
    25e8:	2e 30       	cpi	r18, 0x0E	; 14
    25ea:	31 05       	cpc	r19, r1
    25ec:	b9 f1       	breq	.+110    	; 0x265c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	8e 30       	cpi	r24, 0x0E	; 14
    25f4:	91 05       	cpc	r25, r1
    25f6:	7c f1       	brlt	.+94     	; 0x2656 <KEYPAD_4x4_adjustKeyNumber+0x124>
    25f8:	2b 81       	ldd	r18, Y+3	; 0x03
    25fa:	3c 81       	ldd	r19, Y+4	; 0x04
    25fc:	2f 30       	cpi	r18, 0x0F	; 15
    25fe:	31 05       	cpc	r19, r1
    2600:	79 f1       	breq	.+94     	; 0x2660 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	80 31       	cpi	r24, 0x10	; 16
    2608:	91 05       	cpc	r25, r1
    260a:	69 f1       	breq	.+90     	; 0x2666 <KEYPAD_4x4_adjustKeyNumber+0x134>
    260c:	2f c0       	rjmp	.+94     	; 0x266c <KEYPAD_4x4_adjustKeyNumber+0x13a>
		{
			case 1: keypad_button = 7;
    260e:	87 e0       	ldi	r24, 0x07	; 7
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	2e c0       	rjmp	.+92     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 2: keypad_button = 8;
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	2b c0       	rjmp	.+86     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 3: keypad_button = 9;
    261a:	89 e0       	ldi	r24, 0x09	; 9
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	28 c0       	rjmp	.+80     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 4: keypad_button = '%'; // ASCII Code of %
    2620:	85 e2       	ldi	r24, 0x25	; 37
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	25 c0       	rjmp	.+74     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 5: keypad_button = 4;
    2626:	84 e0       	ldi	r24, 0x04	; 4
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	22 c0       	rjmp	.+68     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 6: keypad_button = 5;
    262c:	85 e0       	ldi	r24, 0x05	; 5
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	1f c0       	rjmp	.+62     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 7: keypad_button = 6;
    2632:	86 e0       	ldi	r24, 0x06	; 6
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	1c c0       	rjmp	.+56     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2638:	8a e2       	ldi	r24, 0x2A	; 42
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	19 c0       	rjmp	.+50     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 9: keypad_button = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	16 c0       	rjmp	.+44     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 10: keypad_button = 2;
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	13 c0       	rjmp	.+38     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 11: keypad_button = 3;
    264a:	83 e0       	ldi	r24, 0x03	; 3
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	10 c0       	rjmp	.+32     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2650:	8d e2       	ldi	r24, 0x2D	; 45
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	0d c0       	rjmp	.+26     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 13: keypad_button = 13;  /* ASCII of Enter */ // ON
    2656:	8d e0       	ldi	r24, 0x0D	; 13
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	0a c0       	rjmp	.+20     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 14: keypad_button = 0;
    265c:	19 82       	std	Y+1, r1	; 0x01
    265e:	08 c0       	rjmp	.+16     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 15: keypad_button = '='; /* ASCII Code of '=' */
    2660:	8d e3       	ldi	r24, 0x3D	; 61
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2666:	8b e2       	ldi	r24, 0x2B	; 43
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13e>
					break;
			default: keypad_button = button_number;
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
					break;
		}

	return keypad_button;
    2670:	89 81       	ldd	r24, Y+1	; 0x01
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <LCD_init>:
#include	"lcd.h"
#include 	"gpio.h"
#include 	"common_macros.h"
#include 	<util/delay.h>

void LCD_init(void){
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	2e 97       	sbiw	r28, 0x0e	; 14
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(E_PORT,E_PIN,PIN_OUTPUT);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	61 e0       	ldi	r22, 0x01	; 1
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>

	#if (Data_Mode == 8)
	GPIO_setupPortDirection(DP_PORT,PORT_OUTPUT);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	6f ef       	ldi	r22, 0xFF	; 255
    26ac:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <GPIO_setupPortDirection>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 ea       	ldi	r26, 0xA0	; 160
    26b6:	b1 e4       	ldi	r27, 0x41	; 65
    26b8:	8b 87       	std	Y+11, r24	; 0x0b
    26ba:	9c 87       	std	Y+12, r25	; 0x0c
    26bc:	ad 87       	std	Y+13, r26	; 0x0d
    26be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a ef       	ldi	r20, 0xFA	; 250
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8f 83       	std	Y+7, r24	; 0x07
    26da:	98 87       	std	Y+8, r25	; 0x08
    26dc:	a9 87       	std	Y+9, r26	; 0x09
    26de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	2c f4       	brge	.+10     	; 0x2702 <LCD_init+0x82>
		__ticks = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <LCD_init+0x100>
	else if (__tmp > 65535)
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	4f e7       	ldi	r20, 0x7F	; 127
    2710:	57 e4       	ldi	r21, 0x47	; 71
    2712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2716:	18 16       	cp	r1, r24
    2718:	4c f5       	brge	.+82     	; 0x276c <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	6b 85       	ldd	r22, Y+11	; 0x0b
    271c:	7c 85       	ldd	r23, Y+12	; 0x0c
    271e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2720:	9e 85       	ldd	r25, Y+14	; 0x0e
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	bc 01       	movw	r22, r24
    2734:	cd 01       	movw	r24, r26
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	0f c0       	rjmp	.+30     	; 0x2762 <LCD_init+0xe2>
    2744:	88 ec       	ldi	r24, 0xC8	; 200
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <LCD_init+0xd0>
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	69 f7       	brne	.-38     	; 0x2744 <LCD_init+0xc4>
    276a:	14 c0       	rjmp	.+40     	; 0x2794 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	9a 83       	std	Y+2, r25	; 0x02
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LCD_init+0x10c>
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
	#endif

	_delay_ms(20);

	#if (Data_Mode == 8)
	LCD_sendCommand(Function_Set);
    2794:	88 e3       	ldi	r24, 0x38	; 56
    2796:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_sendCommand>
	#elif (Data_Mode == 4)
	LCD_sendCommand(Function_Set);
	LCD_sendCommand(Function_Set1);
	LCD_sendCommand(Function_Set2);
	#endif
	LCD_sendCommand(Cursor_OFF);
    279a:	8c e0       	ldi	r24, 0x0C	; 12
    279c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_sendCommand>
	LCD_sendCommand(LCD_Clear);
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_sendCommand>

}
    27a6:	2e 96       	adiw	r28, 0x0e	; 14
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	e9 97       	sbiw	r28, 0x39	; 57
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(RS_PORT,RS_PIN,LOGIC_LOW);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a0 e8       	ldi	r26, 0x80	; 128
    27de:	bf e3       	ldi	r27, 0x3F	; 63
    27e0:	8d ab       	std	Y+53, r24	; 0x35
    27e2:	9e ab       	std	Y+54, r25	; 0x36
    27e4:	af ab       	std	Y+55, r26	; 0x37
    27e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6d a9       	ldd	r22, Y+53	; 0x35
    27ea:	7e a9       	ldd	r23, Y+54	; 0x36
    27ec:	8f a9       	ldd	r24, Y+55	; 0x37
    27ee:	98 ad       	ldd	r25, Y+56	; 0x38
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	89 ab       	std	Y+49, r24	; 0x31
    2802:	9a ab       	std	Y+50, r25	; 0x32
    2804:	ab ab       	std	Y+51, r26	; 0x33
    2806:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2808:	69 a9       	ldd	r22, Y+49	; 0x31
    280a:	7a a9       	ldd	r23, Y+50	; 0x32
    280c:	8b a9       	ldd	r24, Y+51	; 0x33
    280e:	9c a9       	ldd	r25, Y+52	; 0x34
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <LCD_sendCommand+0x72>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	98 ab       	std	Y+48, r25	; 0x30
    2826:	8f a7       	std	Y+47, r24	; 0x2f
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    282a:	69 a9       	ldd	r22, Y+49	; 0x31
    282c:	7a a9       	ldd	r23, Y+50	; 0x32
    282e:	8b a9       	ldd	r24, Y+51	; 0x33
    2830:	9c a9       	ldd	r25, Y+52	; 0x34
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6d a9       	ldd	r22, Y+53	; 0x35
    2844:	7e a9       	ldd	r23, Y+54	; 0x36
    2846:	8f a9       	ldd	r24, Y+55	; 0x37
    2848:	98 ad       	ldd	r25, Y+56	; 0x38
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	98 ab       	std	Y+48, r25	; 0x30
    2868:	8f a7       	std	Y+47, r24	; 0x2f
    286a:	0f c0       	rjmp	.+30     	; 0x288a <LCD_sendCommand+0xd2>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9e a7       	std	Y+46, r25	; 0x2e
    2872:	8d a7       	std	Y+45, r24	; 0x2d
    2874:	8d a5       	ldd	r24, Y+45	; 0x2d
    2876:	9e a5       	ldd	r25, Y+46	; 0x2e
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_sendCommand+0xc0>
    287c:	9e a7       	std	Y+46, r25	; 0x2e
    287e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8f a5       	ldd	r24, Y+47	; 0x2f
    2882:	98 a9       	ldd	r25, Y+48	; 0x30
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8f a5       	ldd	r24, Y+47	; 0x2f
    288c:	98 a9       	ldd	r25, Y+48	; 0x30
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <LCD_sendCommand+0xb4>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	69 a9       	ldd	r22, Y+49	; 0x31
    2896:	7a a9       	ldd	r23, Y+50	; 0x32
    2898:	8b a9       	ldd	r24, Y+51	; 0x33
    289a:	9c a9       	ldd	r25, Y+52	; 0x34
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	98 ab       	std	Y+48, r25	; 0x30
    28a6:	8f a7       	std	Y+47, r24	; 0x2f
    28a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28aa:	98 a9       	ldd	r25, Y+48	; 0x30
    28ac:	9c a7       	std	Y+44, r25	; 0x2c
    28ae:	8b a7       	std	Y+43, r24	; 0x2b
    28b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_sendCommand+0xfc>
    28b8:	9c a7       	std	Y+44, r25	; 0x2c
    28ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_HIGH);
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	a0 e8       	ldi	r26, 0x80	; 128
    28cc:	bf e3       	ldi	r27, 0x3F	; 63
    28ce:	8f a3       	std	Y+39, r24	; 0x27
    28d0:	98 a7       	std	Y+40, r25	; 0x28
    28d2:	a9 a7       	std	Y+41, r26	; 0x29
    28d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6f a1       	ldd	r22, Y+39	; 0x27
    28d8:	78 a5       	ldd	r23, Y+40	; 0x28
    28da:	89 a5       	ldd	r24, Y+41	; 0x29
    28dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a ef       	ldi	r20, 0xFA	; 250
    28e4:	54 e4       	ldi	r21, 0x44	; 68
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	8b a3       	std	Y+35, r24	; 0x23
    28f0:	9c a3       	std	Y+36, r25	; 0x24
    28f2:	ad a3       	std	Y+37, r26	; 0x25
    28f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28f6:	6b a1       	ldd	r22, Y+35	; 0x23
    28f8:	7c a1       	ldd	r23, Y+36	; 0x24
    28fa:	8d a1       	ldd	r24, Y+37	; 0x25
    28fc:	9e a1       	ldd	r25, Y+38	; 0x26
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <LCD_sendCommand+0x160>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2918:	6b a1       	ldd	r22, Y+35	; 0x23
    291a:	7c a1       	ldd	r23, Y+36	; 0x24
    291c:	8d a1       	ldd	r24, Y+37	; 0x25
    291e:	9e a1       	ldd	r25, Y+38	; 0x26
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6f a1       	ldd	r22, Y+39	; 0x27
    2932:	78 a5       	ldd	r23, Y+40	; 0x28
    2934:	89 a5       	ldd	r24, Y+41	; 0x29
    2936:	9a a5       	ldd	r25, Y+42	; 0x2a
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9a a3       	std	Y+34, r25	; 0x22
    2956:	89 a3       	std	Y+33, r24	; 0x21
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <LCD_sendCommand+0x1c0>
    295a:	88 ec       	ldi	r24, 0xC8	; 200
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	98 a3       	std	Y+32, r25	; 0x20
    2960:	8f 8f       	std	Y+31, r24	; 0x1f
    2962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2964:	98 a1       	ldd	r25, Y+32	; 0x20
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <LCD_sendCommand+0x1ae>
    296a:	98 a3       	std	Y+32, r25	; 0x20
    296c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	89 a1       	ldd	r24, Y+33	; 0x21
    2970:	9a a1       	ldd	r25, Y+34	; 0x22
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9a a3       	std	Y+34, r25	; 0x22
    2976:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	89 a1       	ldd	r24, Y+33	; 0x21
    297a:	9a a1       	ldd	r25, Y+34	; 0x22
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <LCD_sendCommand+0x1a2>
    2980:	14 c0       	rjmp	.+40     	; 0x29aa <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	6b a1       	ldd	r22, Y+35	; 0x23
    2984:	7c a1       	ldd	r23, Y+36	; 0x24
    2986:	8d a1       	ldd	r24, Y+37	; 0x25
    2988:	9e a1       	ldd	r25, Y+38	; 0x26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
    2996:	89 a1       	ldd	r24, Y+33	; 0x21
    2998:	9a a1       	ldd	r25, Y+34	; 0x22
    299a:	9e 8f       	std	Y+30, r25	; 0x1e
    299c:	8d 8f       	std	Y+29, r24	; 0x1d
    299e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_sendCommand+0x1ea>
    29a6:	9e 8f       	std	Y+30, r25	; 0x1e
    29a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if (Data_Mode == 8)
	GPIO_writePort(DP_PORT,command);
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	69 ad       	ldd	r22, Y+57	; 0x39
    29ae:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePort>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	89 8f       	std	Y+25, r24	; 0x19
    29bc:	9a 8f       	std	Y+26, r25	; 0x1a
    29be:	ab 8f       	std	Y+27, r26	; 0x1b
    29c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	69 8d       	ldd	r22, Y+25	; 0x19
    29c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8d 8b       	std	Y+21, r24	; 0x15
    29dc:	9e 8b       	std	Y+22, r25	; 0x16
    29de:	af 8b       	std	Y+23, r26	; 0x17
    29e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <LCD_sendCommand+0x24c>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9c 8b       	std	Y+20, r25	; 0x14
    2a42:	8b 8b       	std	Y+19, r24	; 0x13
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <LCD_sendCommand+0x2ac>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9a 8b       	std	Y+18, r25	; 0x12
    2a4c:	89 8b       	std	Y+17, r24	; 0x11
    2a4e:	89 89       	ldd	r24, Y+17	; 0x11
    2a50:	9a 89       	ldd	r25, Y+18	; 0x12
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_sendCommand+0x29a>
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
    2a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <LCD_sendCommand+0x28e>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9c 8b       	std	Y+20, r25	; 0x14
    2a80:	8b 8b       	std	Y+19, r24	; 0x13
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
    2a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8c:	98 89       	ldd	r25, Y+16	; 0x10
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_sendCommand+0x2d6>
    2a92:	98 8b       	std	Y+16, r25	; 0x10
    2a94:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_writePin(DP_PORT,DP_FIRST_PIN+1,GET_BIT(command,1));
		GPIO_writePin(DP_PORT,DP_FIRST_PIN+2,GET_BIT(command,2));
		GPIO_writePin(DP_PORT,DP_FIRST_PIN+3,GET_BIT(command,3));
		_delay_ms(1);
#endif
	GPIO_writePin(E_PORT,E_PIN,LOGIC_LOW);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e8       	ldi	r26, 0x80	; 128
    2aa6:	bf e3       	ldi	r27, 0x3F	; 63
    2aa8:	8b 87       	std	Y+11, r24	; 0x0b
    2aaa:	9c 87       	std	Y+12, r25	; 0x0c
    2aac:	ad 87       	std	Y+13, r26	; 0x0d
    2aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	4a ef       	ldi	r20, 0xFA	; 250
    2abe:	54 e4       	ldi	r21, 0x44	; 68
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	8f 83       	std	Y+7, r24	; 0x07
    2aca:	98 87       	std	Y+8, r25	; 0x08
    2acc:	a9 87       	std	Y+9, r26	; 0x09
    2ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	3f c0       	rjmp	.+126    	; 0x2b70 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	4c f5       	brge	.+82     	; 0x2b5c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	bc 01       	movw	r22, r24
    2b24:	cd 01       	movw	r24, r26
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <LCD_sendCommand+0x39a>
    2b34:	88 ec       	ldi	r24, 0xC8	; 200
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_sendCommand+0x388>
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <LCD_sendCommand+0x37c>
    2b5a:	14 c0       	rjmp	.+40     	; 0x2b84 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5e:	78 85       	ldd	r23, Y+8	; 0x08
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <LCD_sendCommand+0x3c4>
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2b84:	e9 96       	adiw	r28, 0x39	; 57
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	e9 97       	sbiw	r28, 0x39	; 57
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(RS_PORT,RS_PIN,LOGIC_HIGH);
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	60 e0       	ldi	r22, 0x00	; 0
    2bb0:	41 e0       	ldi	r20, 0x01	; 1
    2bb2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e8       	ldi	r26, 0x80	; 128
    2bbc:	bf e3       	ldi	r27, 0x3F	; 63
    2bbe:	8d ab       	std	Y+53, r24	; 0x35
    2bc0:	9e ab       	std	Y+54, r25	; 0x36
    2bc2:	af ab       	std	Y+55, r26	; 0x37
    2bc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc6:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc8:	7e a9       	ldd	r23, Y+54	; 0x36
    2bca:	8f a9       	ldd	r24, Y+55	; 0x37
    2bcc:	98 ad       	ldd	r25, Y+56	; 0x38
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4a ef       	ldi	r20, 0xFA	; 250
    2bd4:	54 e4       	ldi	r21, 0x44	; 68
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	89 ab       	std	Y+49, r24	; 0x31
    2be0:	9a ab       	std	Y+50, r25	; 0x32
    2be2:	ab ab       	std	Y+51, r26	; 0x33
    2be4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2be6:	69 a9       	ldd	r22, Y+49	; 0x31
    2be8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bea:	8b a9       	ldd	r24, Y+51	; 0x33
    2bec:	9c a9       	ldd	r25, Y+52	; 0x34
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	2c f4       	brge	.+10     	; 0x2c08 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	98 ab       	std	Y+48, r25	; 0x30
    2c04:	8f a7       	std	Y+47, r24	; 0x2f
    2c06:	3f c0       	rjmp	.+126    	; 0x2c86 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2c08:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	4c f5       	brge	.+82     	; 0x2c72 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	6d a9       	ldd	r22, Y+53	; 0x35
    2c22:	7e a9       	ldd	r23, Y+54	; 0x36
    2c24:	8f a9       	ldd	r24, Y+55	; 0x37
    2c26:	98 ad       	ldd	r25, Y+56	; 0x38
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e2       	ldi	r20, 0x20	; 32
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	98 ab       	std	Y+48, r25	; 0x30
    2c46:	8f a7       	std	Y+47, r24	; 0x2f
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <LCD_displayCharacter+0xd2>
    2c4a:	88 ec       	ldi	r24, 0xC8	; 200
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9e a7       	std	Y+46, r25	; 0x2e
    2c50:	8d a7       	std	Y+45, r24	; 0x2d
    2c52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_displayCharacter+0xc0>
    2c5a:	9e a7       	std	Y+46, r25	; 0x2e
    2c5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c60:	98 a9       	ldd	r25, Y+48	; 0x30
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	98 ab       	std	Y+48, r25	; 0x30
    2c66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <LCD_displayCharacter+0xb4>
    2c70:	14 c0       	rjmp	.+40     	; 0x2c9a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c72:	69 a9       	ldd	r22, Y+49	; 0x31
    2c74:	7a a9       	ldd	r23, Y+50	; 0x32
    2c76:	8b a9       	ldd	r24, Y+51	; 0x33
    2c78:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	98 ab       	std	Y+48, r25	; 0x30
    2c84:	8f a7       	std	Y+47, r24	; 0x2f
    2c86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c88:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8a:	9c a7       	std	Y+44, r25	; 0x2c
    2c8c:	8b a7       	std	Y+43, r24	; 0x2b
    2c8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LCD_displayCharacter+0xfc>
    2c96:	9c a7       	std	Y+44, r25	; 0x2c
    2c98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_HIGH);
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a0 e8       	ldi	r26, 0x80	; 128
    2caa:	bf e3       	ldi	r27, 0x3F	; 63
    2cac:	8f a3       	std	Y+39, r24	; 0x27
    2cae:	98 a7       	std	Y+40, r25	; 0x28
    2cb0:	a9 a7       	std	Y+41, r26	; 0x29
    2cb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2cb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2cba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	4a ef       	ldi	r20, 0xFA	; 250
    2cc2:	54 e4       	ldi	r21, 0x44	; 68
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	8b a3       	std	Y+35, r24	; 0x23
    2cce:	9c a3       	std	Y+36, r25	; 0x24
    2cd0:	ad a3       	std	Y+37, r26	; 0x25
    2cd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cda:	9e a1       	ldd	r25, Y+38	; 0x26
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e8       	ldi	r20, 0x80	; 128
    2ce2:	5f e3       	ldi	r21, 0x3F	; 63
    2ce4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce8:	88 23       	and	r24, r24
    2cea:	2c f4       	brge	.+10     	; 0x2cf6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	9a a3       	std	Y+34, r25	; 0x22
    2cf2:	89 a3       	std	Y+33, r24	; 0x21
    2cf4:	3f c0       	rjmp	.+126    	; 0x2d74 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    2cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	4c f5       	brge	.+82     	; 0x2d60 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d10:	78 a5       	ldd	r23, Y+40	; 0x28
    2d12:	89 a5       	ldd	r24, Y+41	; 0x29
    2d14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e2       	ldi	r20, 0x20	; 32
    2d1c:	51 e4       	ldi	r21, 0x41	; 65
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9a a3       	std	Y+34, r25	; 0x22
    2d34:	89 a3       	std	Y+33, r24	; 0x21
    2d36:	0f c0       	rjmp	.+30     	; 0x2d56 <LCD_displayCharacter+0x1c0>
    2d38:	88 ec       	ldi	r24, 0xC8	; 200
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	98 a3       	std	Y+32, r25	; 0x20
    2d3e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d42:	98 a1       	ldd	r25, Y+32	; 0x20
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <LCD_displayCharacter+0x1ae>
    2d48:	98 a3       	std	Y+32, r25	; 0x20
    2d4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	9a a3       	std	Y+34, r25	; 0x22
    2d54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d56:	89 a1       	ldd	r24, Y+33	; 0x21
    2d58:	9a a1       	ldd	r25, Y+34	; 0x22
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	69 f7       	brne	.-38     	; 0x2d38 <LCD_displayCharacter+0x1a2>
    2d5e:	14 c0       	rjmp	.+40     	; 0x2d88 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d60:	6b a1       	ldd	r22, Y+35	; 0x23
    2d62:	7c a1       	ldd	r23, Y+36	; 0x24
    2d64:	8d a1       	ldd	r24, Y+37	; 0x25
    2d66:	9e a1       	ldd	r25, Y+38	; 0x26
    2d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	9a a3       	std	Y+34, r25	; 0x22
    2d72:	89 a3       	std	Y+33, r24	; 0x21
    2d74:	89 a1       	ldd	r24, Y+33	; 0x21
    2d76:	9a a1       	ldd	r25, Y+34	; 0x22
    2d78:	9e 8f       	std	Y+30, r25	; 0x1e
    2d7a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <LCD_displayCharacter+0x1ea>
    2d84:	9e 8f       	std	Y+30, r25	; 0x1e
    2d86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if (Data_Mode == 8)
	GPIO_writePort(DP_PORT,data);
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	69 ad       	ldd	r22, Y+57	; 0x39
    2d8c:	0e 94 26 11 	call	0x224c	; 0x224c <GPIO_writePort>
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 e8       	ldi	r26, 0x80	; 128
    2d96:	bf e3       	ldi	r27, 0x3F	; 63
    2d98:	89 8f       	std	Y+25, r24	; 0x19
    2d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da0:	69 8d       	ldd	r22, Y+25	; 0x19
    2da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a ef       	ldi	r20, 0xFA	; 250
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	8d 8b       	std	Y+21, r24	; 0x15
    2dba:	9e 8b       	std	Y+22, r25	; 0x16
    2dbc:	af 8b       	std	Y+23, r26	; 0x17
    2dbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e8       	ldi	r20, 0x80	; 128
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd4:	88 23       	and	r24, r24
    2dd6:	2c f4       	brge	.+10     	; 0x2de2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	9c 8b       	std	Y+20, r25	; 0x14
    2dde:	8b 8b       	std	Y+19, r24	; 0x13
    2de0:	3f c0       	rjmp	.+126    	; 0x2e60 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2de2:	6d 89       	ldd	r22, Y+21	; 0x15
    2de4:	7e 89       	ldd	r23, Y+22	; 0x16
    2de6:	8f 89       	ldd	r24, Y+23	; 0x17
    2de8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	4c f5       	brge	.+82     	; 0x2e4c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    2dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	51 e4       	ldi	r21, 0x41	; 65
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9c 8b       	std	Y+20, r25	; 0x14
    2e20:	8b 8b       	std	Y+19, r24	; 0x13
    2e22:	0f c0       	rjmp	.+30     	; 0x2e42 <LCD_displayCharacter+0x2ac>
    2e24:	88 ec       	ldi	r24, 0xC8	; 200
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9a 8b       	std	Y+18, r25	; 0x12
    2e2a:	89 8b       	std	Y+17, r24	; 0x11
    2e2c:	89 89       	ldd	r24, Y+17	; 0x11
    2e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_displayCharacter+0x29a>
    2e34:	9a 8b       	std	Y+18, r25	; 0x12
    2e36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e38:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	9c 8b       	std	Y+20, r25	; 0x14
    2e40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e42:	8b 89       	ldd	r24, Y+19	; 0x13
    2e44:	9c 89       	ldd	r25, Y+20	; 0x14
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	69 f7       	brne	.-38     	; 0x2e24 <LCD_displayCharacter+0x28e>
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9c 8b       	std	Y+20, r25	; 0x14
    2e5e:	8b 8b       	std	Y+19, r24	; 0x13
    2e60:	8b 89       	ldd	r24, Y+19	; 0x13
    2e62:	9c 89       	ldd	r25, Y+20	; 0x14
    2e64:	98 8b       	std	Y+16, r25	; 0x10
    2e66:	8f 87       	std	Y+15, r24	; 0x0f
    2e68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6a:	98 89       	ldd	r25, Y+16	; 0x10
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <LCD_displayCharacter+0x2d6>
    2e70:	98 8b       	std	Y+16, r25	; 0x10
    2e72:	8f 87       	std	Y+15, r24	; 0x0f
			GPIO_writePin(DP_PORT,DP_FIRST_PIN+1,GET_BIT(data,1));
			GPIO_writePin(DP_PORT,DP_FIRST_PIN+2,GET_BIT(data,2));
			GPIO_writePin(DP_PORT,DP_FIRST_PIN+3,GET_BIT(data,3));
			_delay_ms(1);
#endif
	GPIO_writePin(E_PORT,E_PIN,LOGIC_LOW);
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	61 e0       	ldi	r22, 0x01	; 1
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_writePin>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	a0 e8       	ldi	r26, 0x80	; 128
    2e84:	bf e3       	ldi	r27, 0x3F	; 63
    2e86:	8b 87       	std	Y+11, r24	; 0x0b
    2e88:	9c 87       	std	Y+12, r25	; 0x0c
    2e8a:	ad 87       	std	Y+13, r26	; 0x0d
    2e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	4a ef       	ldi	r20, 0xFA	; 250
    2e9c:	54 e4       	ldi	r21, 0x44	; 68
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	8f 83       	std	Y+7, r24	; 0x07
    2ea8:	98 87       	std	Y+8, r25	; 0x08
    2eaa:	a9 87       	std	Y+9, r26	; 0x09
    2eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eae:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb0:	78 85       	ldd	r23, Y+8	; 0x08
    2eb2:	89 85       	ldd	r24, Y+9	; 0x09
    2eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e8       	ldi	r20, 0x80	; 128
    2ebc:	5f e3       	ldi	r21, 0x3F	; 63
    2ebe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec2:	88 23       	and	r24, r24
    2ec4:	2c f4       	brge	.+10     	; 0x2ed0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	3f c0       	rjmp	.+126    	; 0x2f4e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	3f ef       	ldi	r19, 0xFF	; 255
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	57 e4       	ldi	r21, 0x47	; 71
    2ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	4c f5       	brge	.+82     	; 0x2f3a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	9e 83       	std	Y+6, r25	; 0x06
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
    2f10:	0f c0       	rjmp	.+30     	; 0x2f30 <LCD_displayCharacter+0x39a>
    2f12:	88 ec       	ldi	r24, 0xC8	; 200
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <LCD_displayCharacter+0x388>
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	69 f7       	brne	.-38     	; 0x2f12 <LCD_displayCharacter+0x37c>
    2f38:	14 c0       	rjmp	.+40     	; 0x2f62 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <LCD_displayCharacter+0x3c4>
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2f62:	e9 96       	adiw	r28, 0x39	; 57
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <LCD_displayString+0x6>
    2f7a:	0f 92       	push	r0
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	9b 83       	std	Y+3, r25	; 0x03
    2f82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f84:	19 82       	std	Y+1, r1	; 0x01
    2f86:	0e c0       	rjmp	.+28     	; 0x2fa4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	9b 81       	ldd	r25, Y+3	; 0x03
    2f92:	fc 01       	movw	r30, r24
    2f94:	e2 0f       	add	r30, r18
    2f96:	f3 1f       	adc	r31, r19
    2f98:	80 81       	ld	r24, Z
    2f9a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <LCD_displayCharacter>
		i++;
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	8f 5f       	subi	r24, 0xFF	; 255
    2fa2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	fc 01       	movw	r30, r24
    2fb0:	e2 0f       	add	r30, r18
    2fb2:	f3 1f       	adc	r31, r19
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 23       	and	r24, r24
    2fb8:	39 f7       	brne	.-50     	; 0x2f88 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_Clear);
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_sendCommand>
}
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	62 97       	sbiw	r28, 0x12	; 18
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	9a 8b       	std	Y+18, r25	; 0x12
    2ff0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data,buff,10);
    2ff2:	89 89       	ldd	r24, Y+17	; 0x11
    2ff4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff6:	9e 01       	movw	r18, r28
    2ff8:	2f 5f       	subi	r18, 0xFF	; 255
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	4a e0       	ldi	r20, 0x0A	; 10
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	0e 94 c1 19 	call	0x3382	; 0x3382 <itoa>
   LCD_displayString(buff);
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>
}
    300e:	62 96       	adiw	r28, 0x12	; 18
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col){
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <LCD_moveCursor+0x6>
    3026:	00 d0       	rcall	.+0      	; 0x3028 <LCD_moveCursor+0x8>
    3028:	0f 92       	push	r0
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	8a 83       	std	Y+2, r24	; 0x02
    3030:	6b 83       	std	Y+3, r22	; 0x03

	uint8 lcd_memory_address;
		switch(row)
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	3d 83       	std	Y+5, r19	; 0x05
    303a:	2c 83       	std	Y+4, r18	; 0x04
    303c:	8c 81       	ldd	r24, Y+4	; 0x04
    303e:	9d 81       	ldd	r25, Y+5	; 0x05
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	31 f0       	breq	.+12     	; 0x3050 <LCD_moveCursor+0x30>
    3044:	2c 81       	ldd	r18, Y+4	; 0x04
    3046:	3d 81       	ldd	r19, Y+5	; 0x05
    3048:	21 30       	cpi	r18, 0x01	; 1
    304a:	31 05       	cpc	r19, r1
    304c:	21 f0       	breq	.+8      	; 0x3056 <LCD_moveCursor+0x36>
    304e:	06 c0       	rjmp	.+12     	; 0x305c <LCD_moveCursor+0x3c>
		{
			case 0:
				lcd_memory_address=col;
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	03 c0       	rjmp	.+6      	; 0x305c <LCD_moveCursor+0x3c>
					break;
			case 1:
				lcd_memory_address=col+0x40;
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	80 5c       	subi	r24, 0xC0	; 192
    305a:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		LCD_sendCommand(lcd_memory_address | 0x80);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	80 68       	ori	r24, 0x80	; 128
    3060:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_sendCommand>
}
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	00 d0       	rcall	.+0      	; 0x307a <LCD_displayStringRowColumn+0x6>
    307a:	00 d0       	rcall	.+0      	; 0x307c <LCD_displayStringRowColumn+0x8>
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	89 83       	std	Y+1, r24	; 0x01
    3082:	6a 83       	std	Y+2, r22	; 0x02
    3084:	5c 83       	std	Y+4, r21	; 0x04
    3086:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	6a 81       	ldd	r22, Y+2	; 0x02
    308c:	0e 94 10 18 	call	0x3020	; 0x3020 <LCD_moveCursor>
	LCD_displayString(Str);
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	9c 81       	ldd	r25, Y+4	; 0x04
    3094:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_displayString>

}
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <LM35_getTemperature>:
#include "lm35.h"
#include "adc.h"
#include <util/delay.h>

uint8 LM35_getTemperature(void)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	2f 97       	sbiw	r28, 0x0f	; 15
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
	uint8 temp_value = 0;
    30ba:	1f 86       	std	Y+15, r1	; 0x0f

	ADC_readChannel(SENSOR_CHANNEL_ID);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0e 94 77 07 	call	0xeee	; 0xeee <ADC_readChannel>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	a0 ea       	ldi	r26, 0xA0	; 160
    30c8:	b0 e4       	ldi	r27, 0x40	; 64
    30ca:	8b 87       	std	Y+11, r24	; 0x0b
    30cc:	9c 87       	std	Y+12, r25	; 0x0c
    30ce:	ad 87       	std	Y+13, r26	; 0x0d
    30d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a ef       	ldi	r20, 0xFA	; 250
    30e0:	54 e4       	ldi	r21, 0x44	; 68
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	8f 83       	std	Y+7, r24	; 0x07
    30ec:	98 87       	std	Y+8, r25	; 0x08
    30ee:	a9 87       	std	Y+9, r26	; 0x09
    30f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <LM35_getTemperature+0x6e>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9e 83       	std	Y+6, r25	; 0x06
    3110:	8d 83       	std	Y+5, r24	; 0x05
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <LM35_getTemperature+0xec>
	else if (__tmp > 65535)
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <LM35_getTemperature+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	6b 85       	ldd	r22, Y+11	; 0x0b
    312e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3130:	8d 85       	ldd	r24, Y+13	; 0x0d
    3132:	9e 85       	ldd	r25, Y+14	; 0x0e
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9e 83       	std	Y+6, r25	; 0x06
    3152:	8d 83       	std	Y+5, r24	; 0x05
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <LM35_getTemperature+0xce>
    3156:	88 ec       	ldi	r24, 0xC8	; 200
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9c 83       	std	Y+4, r25	; 0x04
    315c:	8b 83       	std	Y+3, r24	; 0x03
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9c 81       	ldd	r25, Y+4	; 0x04
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <LM35_getTemperature+0xbc>
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <LM35_getTemperature+0xb0>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <LM35_getTemperature+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	6f 81       	ldd	r22, Y+7	; 0x07
    3180:	78 85       	ldd	r23, Y+8	; 0x08
    3182:	89 85       	ldd	r24, Y+9	; 0x09
    3184:	9a 85       	ldd	r25, Y+10	; 0x0a
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	8d 81       	ldd	r24, Y+5	; 0x05
    3194:	9e 81       	ldd	r25, Y+6	; 0x06
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LM35_getTemperature+0xf8>
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	temp_value = (uint8)(((uint32)g_adcResult*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    31a6:	80 91 f0 01 	lds	r24, 0x01F0
    31aa:	90 91 f1 01 	lds	r25, 0x01F1
    31ae:	cc 01       	movw	r24, r24
    31b0:	a0 e0       	ldi	r26, 0x00	; 0
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	2e ee       	ldi	r18, 0xEE	; 238
    31b6:	32 e0       	ldi	r19, 0x02	; 2
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 38 19 	call	0x3270	; 0x3270 <__mulsi3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	bc 01       	movw	r22, r24
    31d6:	cd 01       	movw	r24, r26
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 ed       	ldi	r19, 0xD0	; 208
    31dc:	4f eb       	ldi	r20, 0xBF	; 191
    31de:	54 e4       	ldi	r21, 0x44	; 68
    31e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	8f 87       	std	Y+15, r24	; 0x0f

	return temp_value;
    31f6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    31f8:	2f 96       	adiw	r28, 0x0f	; 15
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <PWM_Timer0_Start>:
#include "pwm.h"
#include "gpio.h"
#include "avr/io.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <PWM_Timer0_Start+0x6>
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	8a 83       	std	Y+2, r24	; 0x02
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    3216:	e3 e5       	ldi	r30, 0x53	; 83
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	8a e6       	ldi	r24, 0x6A	; 106
    321c:	80 83       	st	Z, r24
	TCNT0 = 0;
    321e:	e2 e5       	ldi	r30, 0x52	; 82
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	10 82       	st	Z, r1
	uint8 compare;
	compare=(duty_cycle*255)/100;
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	48 2f       	mov	r20, r24
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	ca 01       	movw	r24, r20
    322c:	9c 01       	movw	r18, r24
    322e:	22 0f       	add	r18, r18
    3230:	33 1f       	adc	r19, r19
    3232:	c9 01       	movw	r24, r18
    3234:	96 95       	lsr	r25
    3236:	98 2f       	mov	r25, r24
    3238:	88 27       	eor	r24, r24
    323a:	97 95       	ror	r25
    323c:	87 95       	ror	r24
    323e:	82 1b       	sub	r24, r18
    3240:	93 0b       	sbc	r25, r19
    3242:	84 0f       	add	r24, r20
    3244:	95 1f       	adc	r25, r21
    3246:	24 e6       	ldi	r18, 0x64	; 100
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	b9 01       	movw	r22, r18
    324c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__divmodhi4>
    3250:	cb 01       	movw	r24, r22
    3252:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = compare;
    3254:	ec e5       	ldi	r30, 0x5C	; 92
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	63 e0       	ldi	r22, 0x03	; 3
    3260:	41 e0       	ldi	r20, 0x01	; 1
    3262:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <GPIO_setupPinDirection>

}
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <__mulsi3>:
    3270:	62 9f       	mul	r22, r18
    3272:	d0 01       	movw	r26, r0
    3274:	73 9f       	mul	r23, r19
    3276:	f0 01       	movw	r30, r0
    3278:	82 9f       	mul	r24, r18
    327a:	e0 0d       	add	r30, r0
    327c:	f1 1d       	adc	r31, r1
    327e:	64 9f       	mul	r22, r20
    3280:	e0 0d       	add	r30, r0
    3282:	f1 1d       	adc	r31, r1
    3284:	92 9f       	mul	r25, r18
    3286:	f0 0d       	add	r31, r0
    3288:	83 9f       	mul	r24, r19
    328a:	f0 0d       	add	r31, r0
    328c:	74 9f       	mul	r23, r20
    328e:	f0 0d       	add	r31, r0
    3290:	65 9f       	mul	r22, r21
    3292:	f0 0d       	add	r31, r0
    3294:	99 27       	eor	r25, r25
    3296:	72 9f       	mul	r23, r18
    3298:	b0 0d       	add	r27, r0
    329a:	e1 1d       	adc	r30, r1
    329c:	f9 1f       	adc	r31, r25
    329e:	63 9f       	mul	r22, r19
    32a0:	b0 0d       	add	r27, r0
    32a2:	e1 1d       	adc	r30, r1
    32a4:	f9 1f       	adc	r31, r25
    32a6:	bd 01       	movw	r22, r26
    32a8:	cf 01       	movw	r24, r30
    32aa:	11 24       	eor	r1, r1
    32ac:	08 95       	ret

000032ae <__udivmodqi4>:
    32ae:	99 1b       	sub	r25, r25
    32b0:	79 e0       	ldi	r23, 0x09	; 9
    32b2:	04 c0       	rjmp	.+8      	; 0x32bc <__udivmodqi4_ep>

000032b4 <__udivmodqi4_loop>:
    32b4:	99 1f       	adc	r25, r25
    32b6:	96 17       	cp	r25, r22
    32b8:	08 f0       	brcs	.+2      	; 0x32bc <__udivmodqi4_ep>
    32ba:	96 1b       	sub	r25, r22

000032bc <__udivmodqi4_ep>:
    32bc:	88 1f       	adc	r24, r24
    32be:	7a 95       	dec	r23
    32c0:	c9 f7       	brne	.-14     	; 0x32b4 <__udivmodqi4_loop>
    32c2:	80 95       	com	r24
    32c4:	08 95       	ret

000032c6 <__divmodhi4>:
    32c6:	97 fb       	bst	r25, 7
    32c8:	09 2e       	mov	r0, r25
    32ca:	07 26       	eor	r0, r23
    32cc:	0a d0       	rcall	.+20     	; 0x32e2 <__divmodhi4_neg1>
    32ce:	77 fd       	sbrc	r23, 7
    32d0:	04 d0       	rcall	.+8      	; 0x32da <__divmodhi4_neg2>
    32d2:	0c d0       	rcall	.+24     	; 0x32ec <__udivmodhi4>
    32d4:	06 d0       	rcall	.+12     	; 0x32e2 <__divmodhi4_neg1>
    32d6:	00 20       	and	r0, r0
    32d8:	1a f4       	brpl	.+6      	; 0x32e0 <__divmodhi4_exit>

000032da <__divmodhi4_neg2>:
    32da:	70 95       	com	r23
    32dc:	61 95       	neg	r22
    32de:	7f 4f       	sbci	r23, 0xFF	; 255

000032e0 <__divmodhi4_exit>:
    32e0:	08 95       	ret

000032e2 <__divmodhi4_neg1>:
    32e2:	f6 f7       	brtc	.-4      	; 0x32e0 <__divmodhi4_exit>
    32e4:	90 95       	com	r25
    32e6:	81 95       	neg	r24
    32e8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ea:	08 95       	ret

000032ec <__udivmodhi4>:
    32ec:	aa 1b       	sub	r26, r26
    32ee:	bb 1b       	sub	r27, r27
    32f0:	51 e1       	ldi	r21, 0x11	; 17
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <__udivmodhi4_ep>

000032f4 <__udivmodhi4_loop>:
    32f4:	aa 1f       	adc	r26, r26
    32f6:	bb 1f       	adc	r27, r27
    32f8:	a6 17       	cp	r26, r22
    32fa:	b7 07       	cpc	r27, r23
    32fc:	10 f0       	brcs	.+4      	; 0x3302 <__udivmodhi4_ep>
    32fe:	a6 1b       	sub	r26, r22
    3300:	b7 0b       	sbc	r27, r23

00003302 <__udivmodhi4_ep>:
    3302:	88 1f       	adc	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	5a 95       	dec	r21
    3308:	a9 f7       	brne	.-22     	; 0x32f4 <__udivmodhi4_loop>
    330a:	80 95       	com	r24
    330c:	90 95       	com	r25
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	08 95       	ret

00003314 <__prologue_saves__>:
    3314:	2f 92       	push	r2
    3316:	3f 92       	push	r3
    3318:	4f 92       	push	r4
    331a:	5f 92       	push	r5
    331c:	6f 92       	push	r6
    331e:	7f 92       	push	r7
    3320:	8f 92       	push	r8
    3322:	9f 92       	push	r9
    3324:	af 92       	push	r10
    3326:	bf 92       	push	r11
    3328:	cf 92       	push	r12
    332a:	df 92       	push	r13
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	ca 1b       	sub	r28, r26
    333e:	db 0b       	sbc	r29, r27
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	09 94       	ijmp

0000334c <__epilogue_restores__>:
    334c:	2a 88       	ldd	r2, Y+18	; 0x12
    334e:	39 88       	ldd	r3, Y+17	; 0x11
    3350:	48 88       	ldd	r4, Y+16	; 0x10
    3352:	5f 84       	ldd	r5, Y+15	; 0x0f
    3354:	6e 84       	ldd	r6, Y+14	; 0x0e
    3356:	7d 84       	ldd	r7, Y+13	; 0x0d
    3358:	8c 84       	ldd	r8, Y+12	; 0x0c
    335a:	9b 84       	ldd	r9, Y+11	; 0x0b
    335c:	aa 84       	ldd	r10, Y+10	; 0x0a
    335e:	b9 84       	ldd	r11, Y+9	; 0x09
    3360:	c8 84       	ldd	r12, Y+8	; 0x08
    3362:	df 80       	ldd	r13, Y+7	; 0x07
    3364:	ee 80       	ldd	r14, Y+6	; 0x06
    3366:	fd 80       	ldd	r15, Y+5	; 0x05
    3368:	0c 81       	ldd	r16, Y+4	; 0x04
    336a:	1b 81       	ldd	r17, Y+3	; 0x03
    336c:	aa 81       	ldd	r26, Y+2	; 0x02
    336e:	b9 81       	ldd	r27, Y+1	; 0x01
    3370:	ce 0f       	add	r28, r30
    3372:	d1 1d       	adc	r29, r1
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	ed 01       	movw	r28, r26
    3380:	08 95       	ret

00003382 <itoa>:
    3382:	fb 01       	movw	r30, r22
    3384:	9f 01       	movw	r18, r30
    3386:	e8 94       	clt
    3388:	42 30       	cpi	r20, 0x02	; 2
    338a:	c4 f0       	brlt	.+48     	; 0x33bc <itoa+0x3a>
    338c:	45 32       	cpi	r20, 0x25	; 37
    338e:	b4 f4       	brge	.+44     	; 0x33bc <itoa+0x3a>
    3390:	4a 30       	cpi	r20, 0x0A	; 10
    3392:	29 f4       	brne	.+10     	; 0x339e <itoa+0x1c>
    3394:	97 fb       	bst	r25, 7
    3396:	1e f4       	brtc	.+6      	; 0x339e <itoa+0x1c>
    3398:	90 95       	com	r25
    339a:	81 95       	neg	r24
    339c:	9f 4f       	sbci	r25, 0xFF	; 255
    339e:	64 2f       	mov	r22, r20
    33a0:	77 27       	eor	r23, r23
    33a2:	0e 94 76 19 	call	0x32ec	; 0x32ec <__udivmodhi4>
    33a6:	80 5d       	subi	r24, 0xD0	; 208
    33a8:	8a 33       	cpi	r24, 0x3A	; 58
    33aa:	0c f0       	brlt	.+2      	; 0x33ae <itoa+0x2c>
    33ac:	89 5d       	subi	r24, 0xD9	; 217
    33ae:	81 93       	st	Z+, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	a1 f7       	brne	.-24     	; 0x339e <itoa+0x1c>
    33b6:	16 f4       	brtc	.+4      	; 0x33bc <itoa+0x3a>
    33b8:	5d e2       	ldi	r21, 0x2D	; 45
    33ba:	51 93       	st	Z+, r21
    33bc:	10 82       	st	Z, r1
    33be:	c9 01       	movw	r24, r18
    33c0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <strrev>

000033c4 <__eerd_byte_m32>:
    33c4:	e1 99       	sbic	0x1c, 1	; 28
    33c6:	fe cf       	rjmp	.-4      	; 0x33c4 <__eerd_byte_m32>
    33c8:	9f bb       	out	0x1f, r25	; 31
    33ca:	8e bb       	out	0x1e, r24	; 30
    33cc:	e0 9a       	sbi	0x1c, 0	; 28
    33ce:	99 27       	eor	r25, r25
    33d0:	8d b3       	in	r24, 0x1d	; 29
    33d2:	08 95       	ret

000033d4 <__eeupd_byte_m32>:
    33d4:	26 2f       	mov	r18, r22

000033d6 <__eeupd_r18_m32>:
    33d6:	e1 99       	sbic	0x1c, 1	; 28
    33d8:	fe cf       	rjmp	.-4      	; 0x33d6 <__eeupd_r18_m32>
    33da:	9f bb       	out	0x1f, r25	; 31
    33dc:	8e bb       	out	0x1e, r24	; 30
    33de:	e0 9a       	sbi	0x1c, 0	; 28
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	0d b2       	in	r0, 0x1d	; 29
    33e4:	02 16       	cp	r0, r18
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <__eeupd_r18_m32+0x1e>
    33e8:	2d bb       	out	0x1d, r18	; 29
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	e2 9a       	sbi	0x1c, 2	; 28
    33f0:	e1 9a       	sbi	0x1c, 1	; 28
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	08 95       	ret

000033f6 <strrev>:
    33f6:	dc 01       	movw	r26, r24
    33f8:	fc 01       	movw	r30, r24
    33fa:	67 2f       	mov	r22, r23
    33fc:	71 91       	ld	r23, Z+
    33fe:	77 23       	and	r23, r23
    3400:	e1 f7       	brne	.-8      	; 0x33fa <strrev+0x4>
    3402:	32 97       	sbiw	r30, 0x02	; 2
    3404:	04 c0       	rjmp	.+8      	; 0x340e <strrev+0x18>
    3406:	7c 91       	ld	r23, X
    3408:	6d 93       	st	X+, r22
    340a:	70 83       	st	Z, r23
    340c:	62 91       	ld	r22, -Z
    340e:	ae 17       	cp	r26, r30
    3410:	bf 07       	cpc	r27, r31
    3412:	c8 f3       	brcs	.-14     	; 0x3406 <strrev+0x10>
    3414:	08 95       	ret

00003416 <_exit>:
    3416:	f8 94       	cli

00003418 <__stop_program>:
    3418:	ff cf       	rjmp	.-2      	; 0x3418 <__stop_program>
